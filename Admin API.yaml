swagger: '2.0'
info:
  title: LogRhythm Admin Service API
  description: The following API endpoints are available for administering a LogRhythm deployment.
schemes:
  - http
  - https
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: lists
    description: Lists provide a mechanism for organizing and saving common search criteria used within filters throughout LogRhythm.

  - name: identities
    description: TrueIdentities represent a collection of identifiers, such as logins and email addresses, that comprise a single identity.

  - name: identity lists
    description: Identity lists have their own restrictions and can function differently from other lists.

  - name: entities
    description: An entity represents a physical location where LogRhythm is deployed. It is used to organize the deployment and contains network records, host records, and LogRhythm components.

  - name: hosts
    description: Hosts identify and assign useful information to important systems in your network. Host records are also good places to add information such as the purpose of the system, any known issues, and key contacts.

  - name: networks
    description: Network records identify and logically group a range of IP addresses to assign a Risk-Based Priority to events and to determine direction for activity being logged.

  - name: users
    description: User Records identify users and are used for alarm notifications. User Profiles enable group access permissions for hosts and log sources.

  - name: knowledgebase
    description: Knowledge Base imports contain a number of objects that are required for every deployment to function properly or that are customizable content applicable to a specific regulation or need.

  - name: notification groups
    description: Notification Groups are used to specify the information included in Alarm Notifications sent to people and groups, as well as the frequency of notifications.

  - name: logsources
    description: Log Source management provides a mechanism for creating log sources and returning log source details for current and pending log sources.

  - name: agents
    description: System Monitor management provides a mechanism for creating and administering System Monitor Agents.

  - name: licenses
x-tagGroups:
  - name: Administration
    tags:
      - lists
      - identities
      - identity lists
      - entities
      - hosts
      - networks
      - license
      - users
      - notification groups
      - logsources
      - agents
  - name: knowledgebase
    tags:
      - locations
      - logSourceTypes
      - mpePolicies
      - messagesourcedateformats
      - lsvtemplates
paths:
  /entities:
    x-swagger-router-controller: entity
    get:
      tags:
        - entities
      summary: List Entities
      description: >-
        Returns all Entities that match the specified criteria.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/parentEntityIdFilter'
        - $ref: '#/parameters/orderBy'
      operationId: listEntities
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns requested Entities.
          schema:
            type: array
            items:
              $ref: '#/definitions/EntitySummary'
        '403':
          description: A User without correct permission tried to fetch the entities.
          schema:
            $ref: '#/definitions/apiUserError'
    post:
      tags:
        - entities
      operationId: upsertEntity
      security:
        - Bearer: []
      description: >-
        Updates an Entity based on the Id and other required details. Returns a 404 error if the Id does not exist. Otherwise, creates an Entity if the Id specified is -1, and then returns the LogRhythm generated Entity Id.
      summary: Update Entity
      parameters:
        - name: body
          in: body
          description: >-
            The body of the Entity, which includes the Id, required attributes, and either all the remaining attributes (for a new Entity) or some of the remaining attributes (for an updated Entity).
          required: true
          schema:
            $ref: '#/definitions/EntitySummary'
      responses:
        '200':
          description: Returns the updated Entity.
          schema:
              $ref: '#/definitions/EntitySummary'
        '201':
          description: Returns the newly created Entity.
          schema:
              $ref: '#/definitions/EntitySummary'
        '409':
          description: Entity with the specified full name already exists. User tried to insert an existing Entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: A User without correct permission tried to create/update the entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /entities/import:
    x-swagger-router-controller: entity
    post:
      tags:
        - entities
      consumes:
      - multipart/form-data
      operationId: uploadEntities
      security:
        - Bearer: []
      description: >-
        Allows administrators to upload CSV files to create Entities.
      summary: Create Entities From File
      parameters:
        - name: file
          in: formData
          type: file
          description: >-
            A CSV file containing Entity details.
          required: true
      responses:
        '200':
          description: Returns uploaded Entities.
          schema:
            type: array
            items:
              $ref: '#/definitions/UploadSummary'
        '403':
          description: A User without correct permission tried to create/update the entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /entities/{id}:
    x-swagger-router-controller: entity
    get:
      tags:
        - entities
      summary: Get Entity Details
      description: >-
        Returns Entity details based on the Entity Id.
      parameters:
        - $ref: '#/parameters/id'
      operationId: getEntityDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns Entity detail based on the Entity Id.
          schema:
            $ref: '#/definitions/Entity'
        '403':
          description: A User without correct permission tried to fetch the entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: Entity not found in the database.
          schema:
            $ref: '#/definitions/apiUserError'
  /entities/{id}/hosts:
    x-swagger-router-controller: entity
    post:
      tags:
        - entities
      consumes:
      - multipart/form-data
      operationId: uploadHosts
      security:
        - Bearer: []
      description: >-
        Allows administrators to upload CSV files to create Hosts. The CSV file can be configured to apply Hosts to multiple Entities. Format of CSV file should be (Host Name, Short Description, Long Description, Risk Level, Threat Level, HostZone). Each line is treated as one host entry.
      summary: Create Hosts From File
      parameters:
        - name: file
          in: formData
          type: file
          description: >-
            CSV file containing Host details
          required: true
        - $ref: '#/parameters/id'
      responses:
        '200':
          description: Returns uploaded Hosts.
          schema:
            $ref: '#/definitions/HostUploadSummary'
        '403':
          description: A User without correct permission tried to update the entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /entities/{id}/networks:
    x-swagger-router-controller: entity
    post:
      tags:
        - entities
      consumes:
      - multipart/form-data
      operationId: uploadNetworks
      security:
        - Bearer: []
      description: >-
        Allows administrators to upload CSV files to create Networks. The CSV file can be configured to create Networks on multiple Entities.
      summary: Create Networks From File
      parameters:
        - name: file
          in: formData
          type: file
          description: >-
            CSV file containing Network details
          required: true
        - $ref: '#/parameters/id'
      responses:
        '200':
          description: Returns uploaded Networks.
          schema:
              $ref: '#/definitions/NetworkUploadSummary'
        '403':
          description: A User without correct permission tried to update the entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /hosts:
    x-swagger-router-controller: host
    get:
      tags:
        - hosts
      summary: Fetch Hosts Details
      description: >-
        Returns all Hosts that match the specified criteria.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/entityFilter'
        - $ref: '#/parameters/recordStatusFilter'
        - $ref: '#/parameters/hostEntityIDFilter'
        - $ref: '#/parameters/hostParentEntityIDFilter'
        - $ref: '#/parameters/hostIdentifierFilter'
      operationId: listHostsDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns requested Hosts.
          schema:
            type: array
            items:
              $ref: '#/definitions/Host'
        '403':
          description: Error will appear when any user who is not permitted, tries to fetch hosts.
          schema:
            $ref: '#/definitions/apiUserError'
    post:
      tags:
        - hosts
      operationId: insertHost
      security:
        - Bearer: []
      description: >-
        Creates a new Host based on details other than Id. Creates a Host if the Id specified is -1, and then returns the LogRhythm generated Host Id.
      summary: Create Host Record
      parameters:
        - name: body
          in: body
          description: >-
            The body of the Host, including all required attributes.
          required: true
          schema:
            $ref: '#/definitions/HostSummary'
      responses:
        '201':
          description: Returns the newly created Host.
          schema:
              $ref: '#/definitions/HostSummary'
        '401':
          description: Unauthorized
          schema:
           type: object
        '403':
          description: A User without correct permission tried to create the host.
          schema:
            $ref: '#/definitions/apiUserError'
    put:
      tags:
        - hosts
      operationId: updateHosts
      security:
        - Bearer: []
      description: >-
        Updates a Host or multiple Hosts based on the Id and other required fields. Searches existing Hosts by Id. Returns a 404 error if the Id does not exist. Otherwise, updates the Hosts and returns the Host Ids with response 200.
      summary: Batch Update Hosts
      parameters:
        - name: body
          in: body
          description: >-
            The body of the Host, including the Id and all required attributes.
          required: true
          schema:
            type: array
            items:
                  $ref: '#/definitions/HostSummaryBatch'
      responses:
        '200':
          description: Returns acknowledgment of Host fields updated with new values. Provides additional information in response body if errors occurred.
          schema:
           type: object
        '401':
          description: Unauthorized
          schema:
           type: object
        '403':
          description: A User without correct permission tried to update the host.
          schema:
            $ref: '#/definitions/apiUserError'
  '/hosts/summary':
    x-swagger-router-controller: host
    get:
      tags:
        - hosts
      summary: Fetch Hosts
      description: >-
        Fetches all Hosts that match the specified criteria. If the count is not specified, 100 matching records are returned. Otherwise, the number of records specified in count are returned.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/entityFilter'
        - $ref: '#/parameters/recordStatusFilter'
      operationId: listHosts
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns Hosts that match criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/HostSummary'
  '/hosts/status':
      x-swagger-router-controller: host
      put:
        tags:
          - hosts
        description: >-
            Updates the status of a Host or multiple Hosts to retire or activate it.
        summary: Change Status of Host
        operationId: updateHostStatus
        parameters:
          - name: body
            in: body
            description: The updated Host status.
            required: true
            schema:
              type: array
              items:
                    type: object
                    properties:
                      hostId:
                        type: integer
                      status:
                        type: string
                        enum:
                            - Retired
                            - Active
        security:
          - Bearer: []
        responses:
          '200':
            description: Returns acknowledgement of Host status changed. Provides additional information in response body if errors occurred.
            schema:
              type: array
              items:
                $ref: '#/definitions/StatusSummary'
          '401':
            description: Unauthorized
            schema:
              type: object
          '403':
            description: A User without correct permission tried to fetch the hosts.
            schema:
              $ref: '#/definitions/apiUserError'
  '/hosts/roles':
    x-swagger-router-controller: host
    post:
      tags:
        - hosts
      operationId: addHostRoles
      security:
        - Bearer: []
      description: >-
            Adds a role to a Host and (optionally) adds specific User records to that role.
      summary: Add Host Role and User
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
                  $ref: '#/definitions/HostToHostRole'
      responses:
        '200':
          description: Returns acknowledgement of Host Roles or User added.
          schema:
           type: object
        '403':
          description: A User without correct permission tried to add Host Roles or User.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
    delete:
      tags:
        - hosts
      operationId: deleteHostRoles
      security:
        - Bearer: []
      description: >-
            Deletes a role and its associated User records from a Host. Deletes a user record from a role associated with a Host.
      summary: Delete Host Role or User
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/HostToHostRole'
      responses:
        '200':
          description: Returns acknowledgement of Host Roles or User deleted.
          schema:
           type: object
        '403':
          description: A User without correct permission tried to delete Host Roles or User.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /hosts/{id}:
    x-swagger-router-controller: host
    get:
      tags:
        - hosts
      summary: Get Host Details
      description: >-
        Returns Host details based on the Host Id.
      parameters:
        - $ref: '#/parameters/id'
      operationId: getHostDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns Host detail based on Host Id.
          schema:
            $ref: '#/definitions/Host'
        '403':
          description: A User without correct permission tried to fetch the host.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: No Host found in the database.
          schema:
            $ref: '#/definitions/apiUserError'
    put:
      tags:
        - hosts
      operationId: updateHost
      security:
        - Bearer: []
      description: >-
        Updates a Host based on the Id and other required details. Searches existing Hosts by Id. Returns a 404 error if the Id does not exist. Otherwise, updates the Host and returns the Host Id with response 200.
      summary: Update Host
      parameters:
        - $ref: '#/parameters/id'
        - name: body
          in: body
          description: >-
            The body of the Host, including the Id and all required attributes.
          required: true
          schema:
            $ref: '#/definitions/HostSummary'
      responses:
        '200':
          description: Returns the updated Host details.
          schema:
              $ref: '#/definitions/HostSummary'
        '403':
          description: A User without correct permission tried to update the host.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /hosts/{id}/identifiers:
    x-swagger-router-controller: host
    post:
      tags:
        - hosts
      operationId: upsertHostIdentifiers
      security:
        - Bearer: []
      description: >-
        Updates a Host based on the Id and other required details. Searches existing Hosts by Id. Updates existing Host if the Id exists or adds a new one. Returns Host Id with response 200.
      summary: Update Host Id
      parameters:
        - $ref: '#/parameters/id'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/HostToHostIdentifiers'
      responses:
        '200':
          description: Returns Host Id added or updated.
          schema:
           type: object
        '403':
          description: A User without correct permission tried to update Host.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
    delete:
      tags:
        - hosts
      operationId: removeHostIdentifiers
      security:
        - Bearer: []
      description: >-
        Searches existing Hosts by Id. If the Id exists, the Host Identifiers are removed.
      summary: Remove Host Identifiers
      parameters:
        - $ref: '#/parameters/id'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/HostToHostIdentifiers'
      responses:
        '204':
          description: Returns nothing if the operation is successful.
          schema:
           type: object
        '403':
          description: A User without correct permission tried to remove Host Identifiers.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /networks:
    x-swagger-router-controller: network
    get:
      tags:
        - networks
      summary: List Networks
      description: >-
        Returns all networks that match the specified criteria.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/recordStatusFilter'
        - name: BIP
          in: query
          required: false
          type: string
          default: ''
          description:  >-
            The starting IP address to allow records to be filtered on a specified IP address, e.g. BIP 127.0.0.1.
        - name: EIP
          in: query
          required: false
          type: string
          default: ''
          description:  >-
            The ending IP address to allow records to be filtered on a specified IP address, e.g. EIP 127.0.0.1.
        - name: Entity
          in: query
          required: false
          type: string
          default: ''
          description: >-
            The description name to allow records to be filtered on a specified Entity name.
        - name: orderBy
          in: query
          required: false
          type: string
          default: Name
          enum:
            - Name
            - BIP
            - EIP
            - Entity
          description:  >-
            Sorts records by Name (Network Name column), BIP, EIP, or Entity name.
      operationId: listNetworks
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns Networks that match criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Network'
        '403':
          description: An unauthorized user tried to fetch the networks.
          schema:
            $ref: '#/definitions/apiUserError'
        '400':
          description: The request is bad. For example, 'FilterInfo - Filter Specified is not a valid json.'
          schema:
            $ref: '#/definitions/apiUserError'
    post:
      tags:
        - networks
      operationId: createNetwork
      security:
        - Bearer: []
      description: >-
        Creates a new Network on the specified Entity if all validation succeeds.
      summary: Create Network
      parameters:
        - name: body
          in: body
          description: >-
            The body of the Network, including all required attributes.
          required: true
          schema:
           $ref: '#/definitions/NetworkSummary'
      responses:
        '201':
          description: Returns the newly created Network.
          schema:
           $ref: '#/definitions/Network'
        '400':
          description: >-
            The request is bad. For example, the location Id is wrong, the IP range overlapped with other Networks, or the name is used by other Network in same Entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tried to create the network.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
    put:
      tags:
        - networks
      description: >-
        Updates riskLevel, threatLevel, recordStatus, hostZone, and location on one or multiple networks. The operation is valid for existing networks only. Ignores update request if the value change requested is for a Network that does not exist or to which the user doesn't have permissions.
      summary: Batch Update Networks
      operationId: updateNetworks
      parameters:
        - name: body
          in: body
          description: >-
            The body of Network, including the Id and and all required attributes.
          required: true
          schema:
            type: array
            items:
                  $ref: '#/definitions/NetworkBatch'
      security:
        - Bearer: []
      responses:
        '200':
            description: Returns acknowledgement of network update. Provides additional information in response body if errors occurred.
            schema:
              type: array
              items:
                $ref: '#/definitions/ResponseSummary'
        '401':
          description: Unauthorized
          schema:
           type: object
  /networks/{id}:
    x-swagger-router-controller: network
    get:
      tags:
        - networks
      summary: Get Network Details
      description: >-
        Returns Network details based on the networkID.
      parameters:
        - $ref: '#/parameters/id'
      operationId: getNetworkDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns Network detail based on networkID.
          schema:
            $ref: '#/definitions/Network'
        '403':
          description: An unauthorized user tried to fetch the network.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: Network not found in the database.
          schema:
            $ref: '#/definitions/apiUserError'
    put:
      tags:
        - networks
      operationId: updateNetwork
      security:
        - Bearer: []
      description: >-
        Updates a Network based on Id and other required details. Searches system for existing Networks by Id. If the Id does not exist, nothing in the database is updated. Otherwise, updates the Network and returns the same Network Id with response 200.
      summary: Update Network
      parameters:
        - $ref: '#/parameters/id'
        - name: body
          in: body
          description: >-
            The body of Network, including all required attributes.
          required: true
          schema:
           $ref: '#/definitions/NetworkSummary'
      responses:
        '200':
          description: Returns the updated Network details.
          schema:
           $ref: '#/definitions/Network'
        '400':
          description: >-
            The request is bad. For example the wrong location Id, the IP range overlapped with other Networks, or the name is used by other Network in same Entity.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tried to update the netwrok.
          schema:
            $ref: '#/definitions/apiUserError'
        '401':
          description: Unauthorized
          schema:
           type: object
  /lists:
    x-swagger-router-controller: List
    get:
      tags:
        - lists
      summary: Get List Details
      description: >-
        Returns list details based on the list type. Returns the User list if the list type value is not specified. Filters on List Name field.

      parameters:
        - $ref: '#/parameters/pageNumber'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/listType'
        - $ref: '#/parameters/name'
        - $ref: '#/parameters/permissionFilter'
      operationId: fetchLists
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns basic list information that matches the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/ListSummary'
        '400':
          description: Minimum length for Name filter is three characters.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tried to fetch the Lists.
          schema:
            $ref: '#/definitions/apiUserError'
    post:
      tags:
        - lists
      summary: Create or Update List Summary
      description: >-
        \* Updates a list summary based on the GUID and other required details.


        \* Searches the system for existing list summaries by GUID. Creates a new list summary if the GUID does not exist. Otherwise, updates the list summary.


        \* Owner field in json body is a required parameter and should be same as the UserID.
      parameters:
        - name: listSummary
          in: body
          description: >-
            The body of the list summary, including all required attributes.
          required: true
          schema:
            $ref: '#/definitions/ListSummary'
      operationId: upsertListSummary
      security:
        - Bearer: []
      responses:
        '200':
          description: Updates list summary in the database.
          schema:
            $ref: '#/definitions/ListSummary'
        '201':
          description: Creates new list in the database with no list items.
          schema:
            $ref: '#/definitions/ListSummary'
        '400':
          description: The time-to-live minimum value is 1200 seconds.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tried to create the list.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: Public list with this name already exists.
          schema:
            $ref: '#/definitions/apiUserError'
  '/lists/{guid}':
    x-swagger-router-controller: List
    get:
      tags:
        - lists
      summary: Get List Details and Items
      description: >-
        Returns list details and list items based on list GUID.
      parameters:
        - $ref: '#/parameters/guid'
        - $ref: '#/parameters/maxItemsThreshold'
      operationId: getListDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns list details and list items for specified the Id.
          schema:
            $ref: '#/definitions/List'
        '400':
          description: List has more items than specified in maxItemsThreshold header.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tried to get the list details.
          schema:
            $ref: '#/definitions/apiUserError'
  '/lists/{guid}/items':
    x-swagger-router-controller: List
    post:
      tags:
        - lists
      summary: Add Items to List
      description: Adds more items to an existing list.
      parameters:
        - $ref: '#/parameters/guid'
        - $ref: '#/parameters/loadListItems'
        - name: body
          in: body
          description: >-
            The body of the list item so that the list can be updated with new items.
          required: true
          schema:
            type: object
            required:
              - items
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/ListItem'
      operationId: addListItems
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns list with all items.
          schema:
            $ref: '#/definitions/List'
        '403':
          description: An unauthorized user tried to add items in the list.
          schema:
            $ref: '#/definitions/apiUserError'
    delete:
      tags:
        - lists
      summary: Remove Items From List
      description: Removes items from an existing list.
      parameters:
        - $ref: '#/parameters/guid'
        - $ref: '#/parameters/loadListItems'
        - name: body
          in: body
          description: Body of the list items to be removed from the list.
          required: true
          schema:
            type: object
            required:
              - items
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/ListItem'
      operationId: removeListItems
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns list with all items.
          schema:
            $ref: '#/definitions/List'
        '403':
          description: An unauthorized user tried to delete items from list.
          schema:
            $ref: '#/definitions/apiUserError'
  /identities:
    x-swagger-router-controller: identity
    get:
      tags:
        - identities
      summary: Get Identities
      description: Returns Identities based on DisplayName, Login, and Domain fields.
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
          description: Skips results, allowing the client to request paged result sets.
        - name: count
          in: query
          required: false
          type: integer
          minimum: 1
          maximum: 1000
          default: 25
          description: Limits the size of the result set.
        - name: name
          in: query
          required: false
          type: string
          description: Filters Identity Display Names. Requires a three character minimum.
        - name: displayIdentifier
          in: query
          required: false
          type: string
          description: Filters Identity Display Ids. Requires a three character minimum.

        - name: entity
          in: query
          required: false
          type: string
          description: Filters Identity Entities. Requires a three character minimum.

        - name: identifier
          in: query
          required: false
          type: string
          description: Filters Identity Ids. Requires a three character minimum.

        - name: recordStatus
          in: query
          required: false
          type: string
          x-nullable: true
          enum:
            - Active
            - Retired
          description: |
              \* Private. For LogRhythm internal use only. *
        - $ref: '#/parameters/identitiesOrderBy'
        - $ref: '#/parameters/dir'
        - name: showRetired
          in: query
          required: false
          type: boolean
          default: false
          description: Filters records by retired status. Defaults to returning only active Identities.
        - name: dateUpdated
          in: query
          required: false
          type: string
          description: Returns results having dateupdated greater or equal to than the one provided in query parameter.
          format: date-time
        - name: sourceName
          in: query
          required: false
          type: string
          description: Filters Identities by the source name.
      operationId: listIdentities
      responses:
        '200':
          description: Returns the complete list of Identities.
          headers:
            X-Offset:
              type: integer
              description: The number of Identities skipped. For example, if you're viewing page 2, this tells you how many Identities you've skipped.
            X-Count:
              type: integer
              description: The number of Identities returned in current page.
            X-Total-Count:
              type: integer
              description: The number of Identities that matched the filter criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Identity'
    put:
      tags:
        - identities
      summary: Update Identities
      description: Updates status and other fields for multiple identities.
      operationId: updateIdentities
      parameters:
        - name: body
          in: body
          description: >-
            The body of identities to be updated.
          required: true
          schema:
            type: array
            items:
                  $ref: '#/definitions/IdentityBatch'
      responses:
        '200':
            description: Returns acknowledgement of identities update. Provides additional information in response body if errors occurred.
            schema:
              type: array
              items:
                $ref: '#/definitions/IdentityResponseSummary'
        '401':
          description: Unauthorized
          schema:
           type: object
        '403':
          description: A User without correct permission tried to update the identities.
          schema:
            $ref: '#/definitions/apiUserError'
  /identities/display-names:
    x-swagger-router-controller: identity
    get:
      tags:
        - identities
      summary: Get Identity Display Names *
      description: |
        Returns a smaller representation of Identities that only include the Display Name.

          \* Private. For LogRhythm internal use only. Used by the ARM, Message Engine, and Web Indexer. *
      parameters:
        - name: dateUpdated
          in: query
          required: false
          type: string
          description: Returns results having dateupdated greater or equal to than the one provided in query parameter.
          format: date-time
      operationId: getIdentityDisplayName
      responses:
        '200':
          description: Returns the complete list of Identities.
          schema:
            type: array
            items:
              $ref: '#/definitions/IdentityDisplayName'
        '500':
          description: Handles error condition when fetching Display Names.
  /identities/identifiers:
    x-swagger-router-controller: identity
    get:
      tags:
        - identities
      summary: Get Identity Identifiers *
      description: |
        Returns a smaller representation of Identities for the Message Processing Engine (MPE),
        which is only interested in the Identifiers of each Identity.

          \* Private. For LogRhythm internal use only. Used by the MPE. *
      parameters:
        - $ref: '#/parameters/rootEntityID'
      operationId: getIdentitiesForMPE
      responses:
        '200':
          description: Returns the Identifiers and their parent Identities for a given rootEntityId.
          schema:
            type: array
            items:
              $ref: '#/definitions/IdentityIdentifiers'
  /identities/bulk:
    x-swagger-router-controller: identity
    post:
      tags:
        - identities
      summary: Update or Create Bulk Identities
      description: |
        Updates or creates Identities for the LogRhythm TrueIdentity SyncClient to synchronize Active Directory accounts. Searches the system for existing Identities. Creates a new Identity if does not currently exist. Otherwise, updates the Identity.
      operationId: postIdentitiesBulk
      parameters:
        - name: entityID
          in: query
          description: A non-zero Entity ID where Identities should be created.
          required: true
          type: integer
        - name: body
          in: body
          description: The body of the Identity to be created.
          required: true
          schema:
            type: object
            properties:
              friendlyName:
                type: string
              accounts:
                type: array
                items:
                  $ref: '#/definitions/IdentitySyncAccount'
            required:
              - friendlyName
              - accounts
      responses:
        '201':
          description: |
            Returns the number of Identity and Account objects after bulk creation.

              \* Unstable, may change in a future release. *
          schema:
            type: array
            items:
              type: object
              properties:
                vendorUniqueKey:
                  type: string
                identityID:
                  type: integer
                  x-omitempty: true
                identifierSourceAccountID:
                  type: integer

  /identities/query:
    x-swagger-router-controller: identity
    post:
      tags:
        - identities
      summary: Search Identities *
      description: |
        Searches Identity objects that contain a specified id.

          \* Private. For LogRhythm internal use only. Used by Cloud AI. *
      operationId: queryIdentities
      parameters:
        - name: body
          in: body
          description: The body of the list query.
          required: true
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  type: integer
      responses:
        '200':
          description: Returns the Identity structures.
          schema:
            type: array
            items:
              $ref: '#/definitions/Identity'
  /identities/summaries/query:
    x-swagger-router-controller: identity
    post:
      tags:
        - identities
      summary: Search Identity Summaries *
      description: |
        Searches Identity objects that contain a specified login or id.

          \* Private. For LogRhythm internal use only. Used by Cloud AI. *
      operationId: queryIdentitiesSummary
      parameters:
        - name: body
          in: body
          description: The body of the list query.
          required: true
          schema:
            type: object
            properties:
              logins:
                type: array
                items:
                  type: string
              ids:
                type: array
                items:
                  type: integer
      responses:
        '200':
          description: Returns the Identity structures.
          schema:
            type: array
            items:
              $ref: '#/definitions/IdentityTACSummary'
  '/identities/{userId}':
    x-swagger-router-controller: identity
    get:
      tags:
        - identities
      summary: Get Identity
      description: Returns Identity details based on the Identity Id.
      parameters:
        - $ref: '#/parameters/userId'
      operationId: getIdentity
      responses:
        '200':
          description: Returns the Identity.
          schema:
            $ref: '#/definitions/Identity'
    put:
      tags:
        - identities
      summary: Update Identity
      description: Updates status and other fields identity.
      operationId: updateIdentity
      parameters:
        - $ref: '#/parameters/userId'
        - name: body
          in: body
          description: The body of the Identity to be updated.
          required: true
          schema:
            $ref: '#/definitions/IdentitySummary'
      responses:
        '200':
          description: Returns the updated Identity.
          schema:
            $ref: '#/definitions/IdentitySummary'
        '401':
          description: Unauthorized
          schema:
           type: object
        '403':
          description: A User without correct permission tried to update the identity.
          schema:
            $ref: '#/definitions/apiUserError'
  '/identities/{userId}/status':
    x-swagger-router-controller: identity
    put:
      tags:
        - identities
      summary: Update Identity Status
      description: Updates the status of an Identity to retire or activate it.
      operationId: updateIdentityStatus
      parameters:
        - $ref: '#/parameters/userId'
        - name: body
          in: body
          description: Returns the updated status of the Identity record.
          required: true
          schema:
            type: object
            required:
              - recordStatus
            properties:
              recordStatus:
                $ref: '#/definitions/recordStatusName'
      responses:
        '200':
          description: Returns the updated Identity.
          schema:
            $ref: '#/definitions/Identity'
  '/identities/{userId}/identifiers/{identityIdentifierId}/status':
    x-swagger-router-controller: identity
    put:
      tags:
        - identities
      summary: Update Identifier Status
      description: |
        Updates the MPE Processing status of an Identity's Identifier to disable or re-enable log enrichment.
      operationId: updateIdentityIdentifierStatus
      parameters:
        - $ref: '#/parameters/userId'
        - $ref: '#/parameters/identityIdentifierId'
        - name: body
          in: body
          description: IdentityIdentifier RecordStatus
          required: true
          schema:
            type: object
            required:
              - recordStatus
            properties:
              recordStatus:
                $ref: '#/definitions/recordStatusName'
      responses:
        '200':
          description: Returns the updated Identity Identifier.
          schema:
            $ref: '#/definitions/IdentityIdentifier'
  '/identities/{userId}/identifiers':
    x-swagger-router-controller: identity
    post:
      tags:
        - identities
      summary: Add Identifier to Identity
      description: Add an Identifier, such as an email address or login, to an existing Identity.
      operationId: createIdentityIdentifier
      parameters:
        - $ref: '#/parameters/userId'
        - name: body
          in: body
          description: Identity Identifier Value
          required: true
          schema:
            $ref: '#/definitions/IdentityIdentifier'
      responses:
        '200':
          description: Returns the updated Identity Identifier.
          schema:
            $ref: '#/definitions/IdentityIdentifier'
        '409':
          description: Identifier already exists for this Identity and cannot be added again.
          schema:
            type: object
  '/identities/{userId}/merge':
    x-swagger-router-controller: identity
    post:
      tags:
        - identities
      summary: Merge Two Identities
      description: Merge an Identity to an existing Identity.
      operationId: mergeIdentities
      parameters:
        - $ref: '#/parameters/userId'
        - name: body
          in: body
          description: Body of merged Identities.
          required: true
          schema:
            type: object
            properties:
              sourceId:
                type: integer
      responses:
        '200':
          description: Returns the Identity structures.
          schema:
            $ref: '#/definitions/Identity'
        '403':
          description: Error will appear when any user who is not permitted, tries to merge identities.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: Identity does not exist or user does not have permission.
          schema:
            type: object
  '/identities/{userId}/photo':
    x-swagger-router-controller: identity
    get:
      tags:
        - identities
      summary: Get Identity Photo
      description: Returns the JPG thumbnail for a given Identity.
      parameters:
        - $ref: '#/parameters/userId'
      operationId: getUserImage
      responses:
        '200':
          description: Returns the User's image.
          schema:
            type: file
          headers:
            Cache-Control:
              type: string
              description: Short term caching configuration to allow in-browser caching.
            ETag:
              type: string
              description: The SHA256 hash of the JPG thumbnail for in-browser caching performance.
        '404':
          description: Error message indicating user image is unavailable
  '/identities/{userId}/merged-identities':
    x-swagger-router-controller: identity
    get:
      tags:
        - identities
      summary: Get Merged Identities
      description: Returns details of identities merged into identity with Id {userId}.
      parameters:
        - $ref: '#/parameters/userId'
      operationId: getMergedIdentitiesById
      responses:
        '200':
          description: Returns the Merged Identities.
          schema:
            type: array
            items:
              $ref: '#/definitions/Identity'
  /identity-lists/{guid}:
    x-swagger-router-controller: identityListView
    get:
      tags:
        - identity lists
      deprecated: true
      summary: Get Identity From List
      description: >-
       Returns Identities embedded in an Identity list. Identities have Accounts or Identifiers associated with them.
      parameters:
        - $ref: '#/parameters/guid'
        - $ref: '#/parameters/maxItemsThreshold'
      operationId: getIdentityListViewDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns Identities and accounts that have internal Identifiers associated with their Identity list
            Id.
          schema:
            type: array
            items:
               $ref: '#/definitions/IdentityForIdentityLists'
        '400':
          description: List has more items than specified in maxItemsThreshold header.
          schema:
            $ref: '#/definitions/apiUserError'
  /locations:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - locations
      summary: Provides all available locations.
      description: >-
       Provides all available locations in the system. Locations are populated in the system via KB import.
      operationId: listLocations
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns available locations.
          schema:
            type: array
            items:
               $ref: '#/definitions/Location'
  /locations/{id}:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - locations
      summary: Provides location details by location ID.
      description: >-
       Provides location details along with full name by location id available in system. Locations are populated in the system via KB import.
      parameters:
       - $ref: '#/parameters/id'
      operationId: getLocationDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns details of available location.
          schema:
            $ref: '#/definitions/LocationDetail'
  /permissions:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: Get User Permissions
      description: >-
       Returns user permissions based on the user's JWT. The permission set includes access to Entities, Hosts, Networks, System Monitor Agents, and Log Sources.
      operationId: getusersBasicDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns the current user permissions in the system.
          schema:
            type: object
        '400':
          description: User not found.
          schema:
            $ref: '#/definitions/apiUserError'
  /messagesourcetypes:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: List Message Source Types
      description: >-
        Returns all log message source types that match the specified criteria. Log message source types are populated in the system via Knowledge Base import.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/msgSourceFormatFilter'
        - $ref: '#/parameters/recordStatusFilter'
      operationId: listMessageSourceTypes
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns log message source types that match specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/MessageSourceTypeSummary'
  /messagesourcetypes/{id}:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: Get Message Source Type Details
      description: >-
        Returns log message source type details based on Id.
      parameters:
        - $ref: '#/parameters/id'
      operationId: getMessageSourceTypeDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns log message source type details based on Id.
          schema:
            $ref: '#/definitions/MessageSourceTypeSummary'
        '404':
          description: Log message source type not found in the database.
          schema:
            $ref: '#/definitions/apiUserError'
  /mpepolicies:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: List MPE Policies
      description: >-
       Returns all MPE Policies that match the specified criteria. MPE policies are populated in the system via Knowledge Base import and can also be created by administrators.
      operationId: listMPEPolicies
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/msgSourceTypeIdFilter'
        - $ref: '#/parameters/allowAutoSortFilter'
      responses:
        '200':
          description: >-
            Returns available MPE Policies.
          schema:
            type: array
            items:
               $ref: '#/definitions/MPEPolicy'
  /mpepolicies/{id}:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - mpePolicies
      summary: Returns the MPE Policy based on the Id.
      description: >-
       Returns the MPE policy based on Id provided by the user.
      parameters:
       - $ref: '#/parameters/id'
      operationId: getMPEPolicy
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns the  MPE policy based on Id.
          schema:
           $ref: '#/definitions/MPEPolicy'
        '404':
          description: If no MPE Policy found error message will be returned.
          schema:
            $ref: '#/definitions/apiUserError'
  /messagesourcedateformat:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - messagesourcedateformats
      summary: List Date Formats
      description: >-
        Returns all log message source date formats that match the specified criteria.
        Message source date formats are populated in the system via KB import.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - name: recordStatusName
          in: query
          required: false
          type: string
          default: '{}'
          description:  >-
            Filters columns by recordStatusName or Active.
        - name: orderBy
          in: query
          required: false
          type: string
          default: Name
          enum:
            - Name
          description:  >-
            Sorts records by Name, which is the log message source type name.
      operationId: listMessageSourceDateFormats
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns log message source date formats that match specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/MessageSourceDateFormatSummary'
  /messagesourcedateformat/{id}:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - messagesourcedateformats
      summary: Get Message Source Date Format
      description: >-
       Returns log message source date format details based on Id.
      parameters:
       - $ref: '#/parameters/id'
      operationId: getMessageSourcedateFormatDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns the log message source date format based on Id.
          schema:
           $ref: '#/definitions/MessageSourceDateFormatSummary'
        '404':
          description: No log message source date format found.
          schema:
            $ref: '#/definitions/apiUserError'
  /lsvtemplates:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: List Log Source Virtualization Templates
      description: >-
        Returns all Log Source Virtualization templates that match the specified criteria. Includes basic details of template and associated items.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/lsvTemplatesOrderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/descriptionFilter'
      operationId: listlsv
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns Log Source Virtualization templates that match specified criteria.
          headers:
            X-Offset:
              type: integer
              description: The number of Log Source Virtualization templates skipped.
            X-Count:
              type: integer
              description: The number of Log Source Virtualization templates requested.
            X-Results-Returned:
              type: integer
              description: The number of Log Source Virtualization templates returned.
            X-Total-Count:
              type: integer
              description: The number of Log Source Virtualization templates in the system that match specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/LogSourceVirtualTemplate'
        '403':
          description: An unauthorized user tried to fetch the LSV templates.
          schema:
            $ref: '#/definitions/apiUserError'
  /lsvtemplates/{id}/lsvtemplateitems:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: Get Log Source Virtualization Template Detail
      description: >-
        Returns Log Source Virtualization template details by Id.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/lsvTemplateItemsOrderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/regExFilter'
        - $ref: '#/parameters/msgSourceTypeIdFilter'
        - $ref: '#/parameters/mpePolicyIdFilter'
      operationId: listlsvById
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns Log Source Virtualization templates that match specified criteria.
          headers:
            X-Offset:
              type: integer
              description: The number of Log Source Virtualization template items skipped.
            X-Count:
              type: integer
              description: The number of Log Source Virtualization template items requested.
            X-Results-Returned:
              type: integer
              description: The number of Log Source Virtualization template items returned.
            X-Total-Count:
              type: integer
              description: The number of Log Source Virtualization template items in the system that match specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/LogSourceVirtualTemplateToItem'
        '403':
          description: An unauthorized user tried to fetch the LSV template detail.
          schema:
            $ref: '#/definitions/apiUserError'
  /lsvtemplateitems:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: Get Log Source Virtualization Template Details
      description: >-
        Returns all Log Source Virtualization template items available in the system. Includes basic details of template items and regular expressions used.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/lsvTemplateItemsOrderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/regExFilter'
        - $ref: '#/parameters/msgSourceTypeIdFilter'
        - $ref: '#/parameters/mpePolicyIdFilter'
      operationId: listlsvitems
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns Log Source Virtualization template items that match specified criteria.
          headers:
            X-Offset:
              type: integer
              description: The number of Log Source Virtualization template items skipped.
            X-Count:
              type: integer
              description: The number of Log Source Virtualization template items requested.
            X-Results-Returned:
              type: integer
              description: The number of Log Source Virtualization template items returned.
            X-Total-Count:
              type: integer
              description: The number of Log Source Virtualization template items in the system that match specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/LogSourceVirtualTemplateItem'
        '403':
          description: An unauthorized user tried to fetch the LSV templates details.
          schema:
            $ref: '#/definitions/apiUserError'
  /lsvtemplateitems/{id}:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: Get Log Source Virtualization Template Detail
      description: >-
        Returns details of specific Log Source Virtualization template items by its Id.
      parameters:
        - $ref: '#/parameters/id'
      operationId: listlsvItemById
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns Log Source Virtualization template item that matches specified criteria.
          schema:
              $ref: '#/definitions/LogSourceVirtualTemplateItem'
        '404':
          description: No Log Source Virtualization Template found.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tried to fetch the LSV template details.
          schema:
            $ref: '#/definitions/apiUserError'
  /privileges:
    x-swagger-router-controller: knowledgebase
    get:
      tags:
        - knowledgebase
      summary: List Privileges
      description: >-
       Returns available privileges in the system.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/privilegeKeyFilter'
        - $ref: '#/parameters/privilegeOrderBy'
      operationId: getPrivileges
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns privilege details.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserProfilePrivilegeDetail'
        '400':
          description: Privileges not found
          schema:
            $ref: '#/definitions/apiUserError'
  /users:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: List User Records
      description: >-
        Returns User records based on the permissions of the currently logged in User and the specified criteria.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/userSummaryOrderByFilter'
        - $ref: '#/parameters/userpermEntityIdFilter'
        - $ref: '#/parameters/hasUserAccountFilter'
        - $ref: '#/parameters/UserRecordStatusFilter'
        - $ref: '#/parameters/userIdFilter'
        - $ref: '#/parameters/nameFilter'
      operationId: listPersons
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns a list of Users based on the permissions of the currently logged in User.
          schema:
              type: array
              items:
                $ref: '#/definitions/User'
        '403':
          description: An unauthorized user tried to return the users.
          schema:
            $ref: '#/definitions/apiUserError'
    post:
      tags:
        - users
      summary: Create New User
      description: >-
        Creates a new User in the system with object security.
      parameters:
        - name: body
          in: body
          description: >-
            The body of the new User you want to create. If object security object is missing, security defaults to Private for Read and Write Permissions. FirstName and LastName are required fields when creating userType = Individual else FullName is required.
          required: true
          schema:
            $ref: '#/definitions/UserLite'
      operationId: createPerson
      security:
        - Bearer: []
      responses:
        '201':
          description: Returns the newly created user.
          schema:
              $ref: '#/definitions/User'
        '400':
          description: Validation failed.
          schema:
            $ref: '#/definitions/apiUserError'
  /users/user-logins:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: List All User Logins
      description: >-
        Returns a list of Users based on the specified criteria and the permissions of the current user.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/entityIdFilter'
        - $ref: '#/parameters/userIdFilter'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/userOrderByFilter'
      operationId: listUserLogins
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns a list of Users based on the specified criteria and the permissions of the current User.
          schema:
              type: array
              items:
                $ref: '#/definitions/Login'
  /users/{id}/privileges:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: List User Privileges
      description: >-
        Returns all privileges associated with the specified User.
      operationId: fetchUserPrivileges
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/privilegeKeyFilter'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns privileges for the specified User.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserProfilePrivilege'
        '403':
          description: User not found.
          schema:
            $ref: '#/definitions/apiUserError'
  /users/{id}/login:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: Get User Login Details
      description: >-
        Returns User login details based on User Id.
      parameters:
        - $ref: '#/parameters/id'
      operationId: listLoginByPersonId
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns login details for the specified User.
          schema:
              $ref: '#/definitions/Login'
        '404':
          description: User not found due to permissions or User does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
    post:
      tags:
        - users
      summary: Create User Login
      description: >-
        Creates a login for the User. The API tries to create ago build Windows User if the password is missing.
      parameters:
        - $ref: '#/parameters/id'
        - name: body
          in: body
          description: >-
            The body of the new User.
          required: true
          schema:
            $ref: '#/definitions/LoginLiteMin'
      operationId: createLogin
      security:
        - Bearer: []
      responses:
        '201':
          description: Returns the newly created User.
          schema:
              $ref: '#/definitions/Login'
        '400':
          description: Validation failed.
          schema:
            $ref: '#/definitions/apiUserError'
  /users/{id}:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: Get User Details
      description: >-
        Returns current User details based on User Id. Includes the User details and the User account associated with the User.
      parameters:
        - $ref: '#/parameters/id'
      operationId: listPersonsById
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns current User details and User account associated with User based on User Id.
          schema:
              $ref: '#/definitions/User'
        '403':
          description: An unauthorized User tried to access the User details.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: User not found due to permissions or User does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
  /notification-groups:
    x-swagger-router-controller: distributions
    get:
      tags:
        - notification groups
      summary: List Notification Groups
      description: >-
        Returns all Notification Groups that match specified criteria. Filters by name or Id.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/notificationOrderByFilter'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/notificationGroupIdsFilter'
      operationId: listNotificationGroups
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns available Notification Groups based on specified filter criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/AlarmNfnGroup'
    post:
      tags:
        - notification groups
      summary: Create Notification Group
      description: >-
        Creates a new Notification Group in the system after validating the inputs.
      operationId: createNotificationGroups
      parameters:
        - name: body
          in: body
          description: >-
            Body of the Notification Group. Ignores any value in the Id field.
          required: true
          schema:
            $ref: '#/definitions/AlarmNfnGroupSummary'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns newly created Notification Group.
          schema:
              $ref: '#/definitions/AlarmNfnGroup'
        '404':
          description: Validation failure or system is otherwise unable to create new Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tries to create a Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: Notification Group with the specified name already exists.
          schema:
            $ref: '#/definitions/apiUserError'
  /notification-groups/{id}:
    x-swagger-router-controller: distributions
    put:
      tags:
        - notification groups
      summary: Update Notification Group
      description: >-
        Updates Notification Groups in the system after validating the inputs.
      operationId: updateNotificationGroups
      parameters:
        - $ref: '#/parameters/notificationGroupId'
        - name: body
          in: body
          description: >-
            The body of the Notification Group.
          required: true
          schema:
            $ref: '#/definitions/AlarmNfnGroup'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns the updated Notification Group.
          schema:
              $ref: '#/definitions/AlarmNfnGroup'
        '404':
          description: Validation failure or system is unable to update the Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tries to update a Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: A Notification Group with the specified name already exists.
          schema:
            $ref: '#/definitions/apiUserError'
    delete:
      tags:
        - notification groups
      summary: Delete Notification Group
      description: >-
        Deletes the Notifcation Group from the system.
      operationId: deleteNotificationGroups
      parameters:
        - $ref: '#/parameters/notificationGroupId'
      security:
        - Bearer: []
      responses:
        '204':
          description: Returns nothing if the operation is successful.
          schema:
            type: object
        '404':
          description: Validation failure or system is unable to delete Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: An unauthorized user tries to delete a Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
  /notification-groups/{id}/users:
    x-swagger-router-controller: distributions
    get:
      tags:
        - notification groups
      summary: List Users in Notification Group
      description: >-
        Returns all available Users in a Notification Group who match the specified criteria.
      parameters:
       - $ref: '#/parameters/notificationGroupId'
       - $ref: '#/parameters/offset'
       - $ref: '#/parameters/count'
       - $ref: '#/parameters/recordStatusFilter'
      operationId: listNotificationGroupsItemsById
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns available Users in Notification Group.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags:
        - notification groups
      summary: Add Users to Notification Group
      description: >-
        Adds Users to an existing Notification Group. Full list of User Ids (both existing and new) must be provided in order to add to the list.
      parameters:
        - $ref: '#/parameters/notificationGroupId'
        - name: body
          in: body
          description: >-
            The body of the new Users.
          required: true
          schema:
            type: array
            items:
              type: integer
      operationId: addPersonsToNotificationGroup
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns validation of Users added to Notification Group.
          schema:
            type: object
        '404':
          description: Notification Group not found due to permissions or Notification Group does not exist in the system.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description:  An unauthorized User tried to add Users to Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
    delete:
      tags:
        - notification groups
      summary: Remove Users From Notification Group
      description: >-
        Removes matching Users available in a Notification Group. Ignores any Users who do not match the criteria.
      parameters:
        - $ref: '#/parameters/notificationGroupId'
        - name: body
          in: body
          description: >-
            The body of the Users to remove.
          required: true
          schema:
            type: array
            items:
              type: integer
      operationId: removePersonsToNotificationGroup
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns validation of Users removed from Notification Group.
          schema:
            type: object
        '404':
          description: Notification Group not found due to permissions or Notification Group does not exist in the system.
        '403':
          description:  An unauthorized User tries to delete Users from Notification Group.
          schema:
            $ref: '#/definitions/apiUserError'
  /user-profiles:
    x-swagger-router-controller: userManagement
    post:
      tags:
        - users
      summary: Create User Profile
      description: >-
        Creates a new User Profile with Entity and Log Source restrictions.
      operationId: createUserProfile
      parameters:
        - name: body
          in: body
          description: >-
            The body of the new User Profile. Any value in Id field is ignored.
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      security:
        - Bearer: []
      responses:
        '201':
          description: Returns the newly created User Profile.
          schema:
              $ref: '#/definitions/UserProfile'
        '401':
          description: Validation failure or system is unable to create a new User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: Resource already exists.
          schema:
            $ref: '#/definitions/apiUserError'
    get:
      tags:
        - users
      summary: Get User Profile Details
      description: >-
        Returns the User Profile deatils based on Entity restrictions of the current User. Global Administrators can see all User Profiles.
      operationId: fetchUserProfiles
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/userProfileIdFilter'
        - $ref: '#/parameters/userprofileOrderByFilter'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns available User Profile details based on restrictions of the current User.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserProfile'
        '403':
          description: User is a Global Analyst or a Restricted Analyst, or a Restricted Admin without User Profile management permissions.
          schema:
            $ref: '#/definitions/apiUserError'
  /user-profiles/summary:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: Get User Profile Summary
      description: >-
        Returns the User Profile summary based on Entity restrictions of the current User. Global Administrators can see all User Profiles.
      operationId: fetchUserProfilesSummaries
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/userProfileIdFilter'
        - $ref: '#/parameters/userprofileOrderByFilter'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns available User Profile summary based on restrictions of the current User.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserProfileSummary'
        '403':
          description: User is a Global Analyst or a Restricted Analyst, or a Restricted Admin without User Profile management permissions.
          schema:
            $ref: '#/definitions/apiUserError'
  /user-profiles/{id}:
    x-swagger-router-controller: userManagement
    post:
      tags:
        - users
      summary: Clone User Profile
      description: >-
        Duplicates an existing User Profile and creates a new User Profile from it.
      operationId: cloneUserProfileByID
      parameters:
        - $ref: '#/parameters/userProfileId'
      security:
        - Bearer: []
      responses:
        '201':
          description: Returns the newly created User Profile.
          schema:
            $ref: '#/definitions/UserProfile'
        '401':
          description: Validation failure or system is unable to create a new User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
    get:
      tags:
        - users
      summary: Get User Profile Details by Id
      description: >-
        Returns the User Profile details based on based on Entity restrictions of the current User. Details include Entities and Log Sources the User Profile has access to, as well as the privileges for the User Profile.
      operationId: fetchUserProfileByID
      parameters:
        - $ref: '#/parameters/userProfileId'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns the User Profile for specified User Profile Id.
          schema:
              $ref: '#/definitions/UserProfile'
        '404':
          description: Validation failure or system is unable find the User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: User is a Global Analyst or a Restricted Analyst, or a Restricted Admin without User Profile management permissions.
          schema:
            $ref: '#/definitions/apiUserError'
    delete:
      tags:
        - users
      summary: Delete User Profile
      description: >-
        Deletes the User Profile as long as no User is associated with it.
      operationId: deleteUserProfileByID
      parameters:
        - $ref: '#/parameters/userProfileId'
      security:
        - Bearer: []
      responses:
        '204':
          description: No content.
          schema:
              type: object
        '401':
          description: Validation failure or system is unable to delete the User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: Action is prohibited because Users are associated with the User Profile.
          schema:
            type: array
            items:
              $ref: '#/definitions/KeyValue'
        '404':
          description: Current User does not have permission to delete the User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
  /user-profiles/{id}/privileges:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: Get User Profile Privileges
      description: >-
        Returns all privileges associated with a User Profile.
      operationId: fetchUserProfilesPrivileges
      parameters:
        - $ref: '#/parameters/userProfileId'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/privilegeKeyFilter'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns available privileges for a User Profile.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserProfilePrivilege'
        '403':
          description: Current User does not have access to the User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
  /user-profiles/{id}/effective-logsources:
    x-swagger-router-controller: userManagement
    get:
      tags:
        - users
      summary: Get User Profile Log Sources
      description: >-
        Returns granted Log Sources for a User Profile.
      operationId: getEffectiveLogSourcesByUserProfileByID
      parameters:
        - $ref: '#/parameters/userProfileId'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns granted Log Sources for a User Profile.
          schema:
            type: array
            items:
              $ref: '#/definitions/Logsource'
        '403':
          description: Current User does not have access to the User Profile.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents:
    x-swagger-router-controller: agents
    get:
      tags:
        - agents
      summary: List Accepted Agents
      description: >-
        Returns details of all accepted Agents that match the specified criteria.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/agentLicenseTypeFilter'
        - $ref: '#/parameters/searchScopeFilter'
        - $ref: '#/parameters/entityFilter'
        - $ref: '#/parameters/versionFilter'
        - $ref: '#/parameters/typeFilter'
        - $ref: '#/parameters/loadBalancedFilter'
        - $ref: '#/parameters/recordStatusFilter'
        - $ref: '#/parameters/fetchAIERecordsFilter'
      operationId: listAgentDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns accepted Agents that match the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Agent'
    post:
      tags:
        - agents
      operationId: createAgent
      security:
        - Bearer: []
      description: >-
        Inserts a new record, and the endpoint returns the LogRhythm generated System Monitor Id. Value of ID field provided in request payload will be neglected while creating the System Monitor Agent.
      summary: Create Agent Record
      parameters:
        - name: body
          in: body
          description: >-
            The body of the Agent, including all attributes.
          required: true
          schema:
            $ref: '#/definitions/Agent'
      responses:
        '201':
          description: Returns the newly created Agent.
          schema:
              $ref: '#/definitions/Agent'
        '403':
          description: A User without the correct permissions tried to create an Agent.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: Agent already exists for the given Host Id.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: The Host Id provided for the Agent is invalid or is for a Host for which the current User does not have permissions.
          schema:
            $ref: '#/definitions/apiUserError'
    put:
      tags:
        - agents
      operationId: updateAgent
      security:
        - Bearer: []
      description: >-
        Updates an agent based on the Id and other required details. Searches existing agent by Id. Returns a 404 error if the Id does not exist. Otherwise, updates the agent and returns the agent Id with response 200.
      summary: Update Agent Record
      parameters:
        - name: body
          in: body
          description: >-
            The body of the Agent, including all attributes.
          required: true
          schema:
            $ref: '#/definitions/Agent'
      responses:
        '200':
          description: Returns the updated agent details.
          schema:
              $ref: '#/definitions/Agent'
        '403':
          description: A User without the correct permissions tried to create an Agent.
          schema:
            $ref: '#/definitions/apiUserError'
        '404':
          description: The Host Id provided for the Agent is invalid or is for a Host for which the current User does not have permissions.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: Agent already exists for the given Host Id.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents/summary:
    x-swagger-router-controller: agents
    get:
      tags:
        - agents
      summary: List Summary of Accepted Agents
      description: >-
        Returns a summary of all accepted Agents.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/agentLicenseTypeFilter'
        - $ref: '#/parameters/searchScopeFilter'
        - $ref: '#/parameters/entityFilter'
        - $ref: '#/parameters/versionFilter'
        - $ref: '#/parameters/typeFilter'
        - $ref: '#/parameters/loadBalancedFilter'
        - $ref: '#/parameters/recordStatusFilter'
        - $ref: '#/parameters/fetchAIERecordsFilter'
      operationId: listAgents
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns accepted Agents with matching criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/AgentSummary'
  /agents/{id}:
    x-swagger-router-controller: agents
    get:
      tags:
        - agents
      summary: Get Agent By Id
      description: >-
        Returns the details of the specified Agent.
      parameters:
        - $ref: '#/parameters/id'
      operationId: getAgentDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns accepted Agent by Id.
          schema:
            $ref: '#/definitions/Agent'
        '404':
          description: Agents are not found due to permissions or Agents do not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents/{id}/logsources:
    x-swagger-router-controller: agents
    get:
      tags:
        - agents
      summary: List Agent Log Sources
      description: Returns all log sources for an Agent, including retired log sources, unless filtered out.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/messageSourceTypeIdFilter'
        - $ref: '#/parameters/virtualLogSourceFilter'
        - $ref: '#/parameters/loadBalancedFilter'
        - $ref: '#/parameters/recordStatusFilter'
      operationId: getAgentLogSources
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns all log sources that match the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Logsource'
  /agents-request:
    x-swagger-router-controller: agents
    get:
      tags:
        - agents
      summary: List Pending Agent Requests
      description: Returns all pending Agent requests that the current User has permission to access.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/entityFilter'
        - $ref: '#/parameters/versionFilter'
        - $ref: '#/parameters/typeFilter'
        - $ref: '#/parameters/acceptanceStatusFilter'
      operationId: getPendingAgents
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns all pending Agents that match the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/PendingAgent'
        '403':
          description: A User without the correct permissions tried to access pending Agents.
          schema:
            $ref: '#/definitions/apiUserError'
    delete:
      tags:
        - agents
      summary: Delete Pending Agents
      description: >-
        Deletes rejected or unassociated Agents.
      operationId: deletePendingAgents
      parameters:
        - name: body
          in: body
          description: The pending Agent GUIDs to be deleted.
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      security:
        - Bearer: []
      responses:
        '204':
          description: Returns nothing if the operation is successful.
          schema:
            type: object
        '403':
          description: A User without the correct permissions tried to delete pending Agents.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents-request/{guid}/associate:
    x-swagger-router-controller: agents
    put:
      tags:
        - agents
      summary: Associate pending agent
      description: Returns the details of the system monitor Agent, after associating the specified pending agent with the specified existing agent.
      parameters:
        - $ref: '#/parameters/guid'
        - name: body
          in: body
          description: Returns the updated status of the Identity record.
          required: true
          schema:
            type: object
            required:
              - agentId
            properties:
              agentId:
                type: integer
      operationId: associateAgent
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns agent details.
          schema:
            $ref: '#/definitions/Agent'
        '404':
          description: Pending Agent not found due to permissions or Agent does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: A User without the correct permissions tried to access the pending Agent.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents-request/{guid}/accept:
    x-swagger-router-controller: agents
    put:
      tags:
        - agents
      summary: Accept pending agent
      description: Returns the details of the system monitor Agent, after accepting the specified pending agent.
      parameters:
        - $ref: '#/parameters/guid'
        - name: body
          in: body
          description: >-
            The initial settings to accept system monitor agent.
          required: true
          schema:
            $ref: '#/definitions/AgentInitialSeetings'
      operationId: acceptPendingAgent
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns agent details.
          schema:
            $ref: '#/definitions/Agent'
        '404':
          description: Pending Agent not found due to permissions or Agent does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: A User without the correct permissions tried to access the pending Agent.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents-request/{guid}:
    x-swagger-router-controller: agents
    get:
      tags:
        - agents
      summary: Get Pending Agent
      description: Returns pending Agent request, based on the GUID, that the User has permission to access.
      parameters:
        - $ref: '#/parameters/guid'
      operationId: getPendingAgent
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns the pending Agent.
          schema:
            $ref: '#/definitions/PendingAgent'
        '404':
          description: Pending Agent not found due to permissions or Agent does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: A User without the correct permissions tried to access the pending Agent.
          schema:
            $ref: '#/definitions/apiUserError'
  /agents-request/{guid}/reject:
    x-swagger-router-controller: agents
    put:
      tags:
        - agents
      summary: Reject Pending Agent
      description: Rejects a pending Agent, based on the GUID, that the User has permission to access.
      parameters:
        - $ref: '#/parameters/guid'
      operationId: rejectPendingAgent
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns the pending Agent.
          schema:
            $ref: '#/definitions/PendingAgent'
        '404':
          description: Pending Agent not found due to permissions or Agent does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
        '403':
          description: A User without the correct permissions tried to access the pending Agent.
          schema:
            $ref: '#/definitions/apiUserError'

  /logsources/:
    x-swagger-router-controller: logsources
    get:
      tags:
        - logsources
      summary: List Accepted Log Sources
      description: >-
        Returns a summary of all accepted log sources.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/descriptionFilter'
        - $ref: '#/parameters/systemMonitorId'
        - $ref: '#/parameters/entityIdFilter'
        - $ref: '#/parameters/messageSourceTypeIdFilter'
        - $ref: '#/parameters/virtualLogSourceFilter'
        - $ref: '#/parameters/loadBalancedFilter'
        - $ref: '#/parameters/recordStatusFilter'
        - $ref: '#/parameters/hostIdsFilter'
      operationId: listLogsources
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns accepted log sources that match the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Logsource'
    post:
      tags:
        - logsources
      operationId: createLogsource
      security:
        - Bearer: []
      description: >-
        Inserts a new log source if Id specified is -1, and then returns the LogRhythm generated log source Id.
      summary: Create Log Source
      parameters:
        - name: body
          in: body
          description: >-
            The body of the log source, including all required attributes.
          required: true
          schema:
            $ref: '#/definitions/Logsource'
      responses:
        '201':
          description: Returns the newly created log source.
          schema:
              $ref: '#/definitions/Logsource'
        '403':
          description: A User without the correct permissions tried to create a new log source.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: A log source record already exists for the chosen name.
          schema:
            $ref: '#/definitions/apiUserError'
  /logsources/{id}:
    x-swagger-router-controller: logsources
    get:
      tags:
        - logsources
      summary: Get Log Source Details
      description: >-
        Returns log source details based on log source Id.
      parameters:
        - $ref: '#/parameters/id'
      operationId: getLogSourceDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns log source details based on Id.
          schema:
            $ref: '#/definitions/Logsource'
        '404':
          description: Log source not found due to permissions or log source does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
    put:
      tags:
        - logsources
      operationId: updateLogsource
      security:
        - Bearer: []
      description: >-
        Updates a log source based on the Id and other required details. Searches existing log source by Id. Returns a 404 error if the Id does not exist. Otherwise, updates the log source and returns the log source Id with response 200.
      summary: Update Log Source
      parameters:
        - $ref: '#/parameters/id'
        - name: body
          in: body
          description: >-
            The body of the log source, including all required attributes.
          required: true
          schema:
            $ref: '#/definitions/Logsource'
      responses:
        '200':
          description: Returns the updated log source details.
          schema:
              $ref: '#/definitions/Logsource'
        '403':
          description: A User without the correct permissions tried to update the log source.
          schema:
            $ref: '#/definitions/apiUserError'
  '/logsources/{id}/status':
      x-swagger-router-controller: logsources
      put:
        tags:
          - logsources
        description: >-
            Updates the status of a Losgource to retire or activate it.
        summary: Change Status of logsources
        parameters:
          - $ref: '#/parameters/id'
          - name: body
            in: body
            description: The updated Logsource status.
            required: true
            schema:
              type: object
              required:
              - recordStatus
              properties:
                recordStatus:
                  $ref: '#/definitions/recordStatusName'
        operationId: updateLogsourceStatus
        security:
          - Bearer: []
        responses:
          '200':
            description: Returns acknowledgement of Logsource status changed. Provides additional information in response body if errors occurred.
            schema:
              $ref: '#/definitions/Logsource'
          '403':
            description: A User without correct permission tried to update the logsource.
            schema:
              $ref: '#/definitions/apiUserError'
  /logsources-request/:
    x-swagger-router-controller: logsources
    get:
      tags:
        - logsources
      summary: List Pending Log Sources
      description: >-
        Returns details of all pending log sources.
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/count'
        - $ref: '#/parameters/orderBy'
        - $ref: '#/parameters/dir'
        - $ref: '#/parameters/nameFilter'
        - $ref: '#/parameters/systemMonitorId'
        - $ref: '#/parameters/logSourceacceptanceStatusFilter'
        - $ref: '#/parameters/messageSourceTypeIdFilter'
      operationId: listPendingLogsources
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns pending log sources that match the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/PendingLogsource'
    post:
      tags:
        - logsources
      operationId: createPendingLogsource
      security:
        - Bearer: []
      description: >-
        Inserts a new pending log source if the Id specified is -1, and returns the pending log source Id.
      summary: Create Pending Log Source
      parameters:
        - name: body
          in: body
          description: >-
            The body of the pending log source, including all required attributes.
          required: true
          schema:
            $ref: '#/definitions/PendingLogsourceSummary'
        - $ref: '#/parameters/If-None-Match'
      responses:
        '201':
          description: Returns the newly created pending log source.
          schema:
              $ref: '#/definitions/PendingLogsource'
        '200':
          description: Returns conflicting pending log source if header value for If-None-Match is not *.
          schema:
              $ref: '#/definitions/PendingLogsource'
        '403':
          description: A User without the correct permissions tried to create a new pending log source.
          schema:
            $ref: '#/definitions/apiUserError'
        '409':
          description: A pending log source already exists for the chosen name.
          schema:
            $ref: '#/definitions/apiUserError'
    delete:
      tags:
        - logsources
      summary: Delete Pending LogSource
      description: >-
        Deletes rejected logsources.
      operationId: deletePendingLogSource
      parameters:
        - name: body
          in: body
          description: The pending logsource's msgSourceAcceptanceID to be deleted.
          required: true
          schema:
            type: array
            items:
              type: integer
      security:
        - Bearer: []
      responses:
        '204':
          description: Returns nothing if the operation is successful.
          schema:
            type: object
        '403':
          description: A User without the correct permissions tried to delete pending Agents.
          schema:
            $ref: '#/definitions/apiUserError'
  /logsources-request/{msgSourceAcceptanceID}:
    x-swagger-router-controller: logsources
    get:
      tags:
        - logsources
      summary: Get Pending Log Source Details
      description: >-
        Returns pending log source details based on log source Id.
      parameters:
        - $ref: '#/parameters/msgSourceAcceptanceID'
      operationId: getPendingLogsourceDetails
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns pending log source details based on log source Id.
          schema:
              $ref: '#/definitions/PendingLogsource'
        '404':
          description: Log source not found due to permissions or log source does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
  /logsources-request/{msgSourceAcceptanceID}/accept:
    x-swagger-router-controller: logsources
    put:
      tags:
        - logsources
      summary: Accept pending LogSource by ID
      description: >-
        \* Will returns accepted log source details based on system generated log source Id.


        \* MsgSourceType is the only required field.


        \* If log source name will not be provided in request body, system generated  name will be assigned to new logsource.


        \* If knownHost will not be provided in request body, admin-api will resolve logsource's host automatically.


        \* If mpePolicy will not be provided in request payload, default mpePolicy will be assigned to logsource based on msgSourceType.


        \* Either acceptDefault or enableCustomizeAcceptance need to be set to true in order to accept pending LogSource.


        \* In custom acceptance, host assignment/creation will be done based on the entity id given in request payload.


        \* If entity id will not be provided with custom acceptance, logsource will be created on the pending LogSource's agent entity.


        \* In custom acceptance, api wil give priority to entity given in request body for host assignment instead of KnownHost.


      parameters:
        - $ref: '#/parameters/msgSourceAcceptanceID'
        - name: body
          in: body
          description: >-
            The body of the pending log source, including all required attributes.
          required: true
          schema:
            $ref: '#/definitions/LogSourceInitialSettings'
      operationId: acceptPendingLogsource
      security:
        - Bearer: []
      responses:
        '200':
          description: Returns pending log source details based on log source Id.
          schema:
              $ref: '#/definitions/Logsource'
        '404':
          description: Log source not found due to permissions or log source does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
  /logsources-request/{msgSourceAcceptanceID}/reject:
    x-swagger-router-controller: logsources
    put:
      tags:
        - logsources
      summary: Rejects a Pending Log Source.
      description: >-
        Rejects a pending log source based on log source Id.
      parameters:
        - $ref: '#/parameters/msgSourceAcceptanceID'
      operationId: rejectPendingLogSource
      security:
        - Bearer: []
      responses:
        '200':
          description: Rejects a pending log source based on log source Id.
          schema:
              $ref: '#/definitions/PendingLogsource'
        '404':
          description: Log source not found due to permissions or log source does not exist in system.
          schema:
            $ref: '#/definitions/apiUserError'
  "/licensed-entitlements":
    x-swagger-router-controller: licenses
    get:
      tags:
        - licenses
      summary: Get Licensed Entitlements *
      description: |
        Retrieve entitlements for registered SIEM license.

          \* *unstable (may change in a future release)*
      operationId: getEntitlements
      responses:
        '200':
          description: License state for registered SIEM components
          schema:
            $ref: '#/definitions/Entitlements'

parameters:
  id:
    in: path
    name: id
    required: true
    type: integer
    description: The Object Id stored in the database.
    minimum: -2147483647
    maximum: 2147483647
  notificationGroupId:
    in: path
    name: id
    required: true
    type: integer
    description: The Notification Group Id stored in the database.
  userProfileId:
    in: path
    name: id
    required: true
    type: integer
    description: The User Profile Id stored in the database.
  guid:
    in: path
    name: guid
    required: true
    type: string
    description: The GUID stored in the database.
  rootEntityID:
    in: query
    name: rootEntityID
    required: true
    type: integer
    description: A non-zero Entity ID of a root Entity.
  pageSize:
    name: pageSize
    in: header
    required: false
    type: integer
    default: 100
    description: >-
      The number of records shown in a page.
  If-None-Match:
    name: If-None-Match
    in: header
    required: false
    type: string
    default: ""
    description: >-
      The API returns status code 409 if the value of this header is set to * and there is a conflict. Any other values return status code 200 if a conflicting resource is found during resource creation.
  maxItemsThreshold:
    name: maxItemsThreshold
    in: header
    required: false
    type: integer
    default: 1000
    description: >-
      The upper limit for items that can be returned in a single request.
  loadListItems:
    name: loadListItems
    in: header
    required: false
    type: boolean
    default: false
    description: >-
      Returns list items after items are added to or removed from an existing list if set to true. Otherwise, returns a list summary but no items.
  pageNumber:
    name: pageNumber
    description: >-
      The number of specific pages to view.
    in: header
    required: false
    type: integer
    default: 1
  name:
    in: header
    name: name
    required: false
    type: string
    description: The name of the object or regex match.
    default: ''
  listType:
    name: listType
    in: header
    required: false
    type: string
    description: List types supported in LogRhythm
    enum:
      - Application
      - Classification
      - CommonEvent
      - Host
      - Location
      - MsgSource
      - MsgSourceType
      - MPERule
      - Network
      - User
      - GeneralValue
      - Entity
      - RootEntity
      - IP
      - IPRange
      - Identity
      - None
    default: None
  userId:
    name: userId
    in: path
    required: true
    type: integer
    description: Identity Management User Id
  identityIdentifierId:
    name: identityIdentifierId
    in: path
    required: true
    type: integer
    description: The Id of a specific Identifier owned by a single Identity.
  offset:
    name: offset
    in: query
    required: false
    type: integer
    description: The starting point of records to be returned.
    default: 0
  count:
    name: count
    in: query
    required: false
    type: integer
    description: The number of results to be returned.
    minimum: 1
    maximum: 1000
    default: 100
  dir:
    name: dir
    in: query
    required: false
    type: string
    description: Sorts records by ascending or descending.
    enum:
      - ascending
      - descending
    default: ascending
  nameFilter:
    name: name
    in: query
    required: false
    type: string
    description: Object name filter.
  privilegeKeyFilter:
    name: key
    in: query
    required: false
    type: string
    description: Filters privilege by Key.
  entityFilter:
    name: entity
    in: query
    required: false
    type: string
    description: Filters records by Entity name.
  descriptionFilter:
    name: desc
    in: query
    required: false
    type: string
    description: Filters records by object description.
  regExFilter:
    name: regex
    in: query
    required: false
    type: string
    description: Filters records by object regex.
  mpePolicyIdFilter:
    name: mpePolicy
    in: query
    required: false
    type: integer
    description: Filters records by object mpePolicy.
  msgSourceTypeIdFilter:
    name: messageSourceTypeId
    in: query
    required: false
    type: integer
    description: Filters records by object messageSourceTypeId.
  msgSourceFormatFilter:
    name: messageSourceFormat
    in: query
    required: false
    type: integer
    x-nullable: true
    x-omitempty: true
    description: Filters records by object messageSourceFormat.
  recordStatusFilter:
    name: recordStatus
    in: query
    required: false
    type: string
    description: Filters records by object recordStatus.
    default: all
    enum:
      - all
      - active
      - retired
  logSourceacceptanceStatusFilter:
    name: logSourceAcceptanceStatus
    description: Filters log source records by acceptance status.
    in: query
    required: false
    type: string
    enum:
      - All
      - Pending
      - Rejected
    default: All
  acceptanceStatusFilter:
    name: acceptanceStatus
    description: Filters acceptance records by status.
    in: query
    required: false
    type: array
    items:
      type: string
      enum:
        - All
        - Pending
        - Rejected
  allowAutoSortFilter:
    name: allowAutoSort
    in: query
    required: false
    type: boolean
    description: Filters records by object allowAutoSort value.
    x-nullable: true
  parentEntityIdFilter:
    name: parentEntityId
    in: query
    required: false
    type: string
    description: Filters records by Object parentEntityId.
  lsvTemplatesOrderBy:
    name: orderBy
    description: Sorts records by name or description.
    in: query
    required: false
    type: string
    default: name
    enum:
      - name
      - description
  lsvTemplateItemsOrderBy:
    name: orderBy
    description: Sort records by name, regex, or sortOrder.
    in: query
    required: false
    type: string
    default: name
    enum:
      - name
      - regEx
      - sortOrder
  identitiesOrderBy:
    name: orderBy
    description: Sorts record by displayName, recordStatus, Entity, or Displayidentifier.
    in: query
    required: false
    type: string
    default: displayName
    enum:
      - displayName
      - recordStatus
      - Entity
      - Displayidentifier
      - dateupdated
      - sourcename
  orderBy:
    name: orderBy
    description: Sorts records by name or Id.
    in: query
    required: false
    type: string
    default: name
    enum:
      - name
      - id
  entityIdFilter:
    name: entityId
    description: Filters User records by Entity Id.
    in: query
    required: false
    type: array
    items:
      type: integer
  hostEntityIDFilter:
    name: hostEntityId
    in: query
    required: false
    type: array
    items:
      type: integer
    description: A collection of non-zero entityID
  hostParentEntityIDFilter:
    name: parentEntityId
    in: query
    required: false
    type: array
    items:
      type: integer
    description: A collection of non-zero parent entityID
  hostIdentifierFilter:
    name: hostIdentifier
    in: query
    required: false
    type: array
    items:
      type: string
    description: Host Identifier Filter. This will be used to filter hosts by its identifiers.
  userProfileIdFilter:
    name: id
    description: Filters results for one or more User Profile Ids.
    in: query
    required: false
    type: array
    items:
      type: integer
  userpermEntityIdFilter:
    name: entityIds
    description: Filters records based on default entity accessible by the User.
    in: query
    required: false
    type: array
    items:
      type: integer
  entityFilterById:
    name: entityId
    description: Filters results for a specific Entity Id in resources.
    in: query
    required: false
    type: integer
  hostIdsFilter:
    name: hostId
    description: Filters results for one or more hosts.
    in: query
    required: false
    type: array
    items:
      type: integer
  messageSourceTypeIdFilter:
    name: messageSourceTypeId
    description: Filters results for a specific Message Source Type Id in resources.
    in: query
    required: false
    type: integer
  systemMonitorId:
    name: systemMonitorId
    description: Filters results for a specific System Monitor Id in resources.
    in: query
    required: false
    type: integer
  hasUserAccountFilter:
    name: hasLogin
    description: Filters records by specific User account.
    in: query
    required: false
    type: array
    items:
      type: boolean
    default:
        - true
        - false
  userSummaryOrderByFilter:
    name: orderBy
    description: Sort records by user name, Id, or login.
    in: query
    required: false
    type: string
    default: firstname
    enum:
      - firstname
      - lastname
      - login
      - id
  privilegeOrderBy:
    name: orderBy
    description: Sorts privilege records by key and display name.
    in: query
    required: false
    type: string
    default: key
    enum:
      - key
      - displayname
  UserRecordStatusFilter:
    name: userStatus
    description: Filters User records by status.
    in: query
    required: false
    type: array
    items:
      type: string
      enum:
        - Active
        - Retired
  userIdFilter:
    name: id
    description: Filters on multiple User Ids. For example, ?id=1,2,3,4,5
    in: query
    required: false
    type: array
    items:
      type: integer
  notificationOrderByFilter:
    name: orderBy
    description: Sorts records by notification name or Id.
    in: query
    required: false
    type: string
    default: name
    enum:
      - name
      - id
  notificationGroupIdsFilter:
    name: id
    description: Filters records by Notification Id.
    in: query
    required: false
    type: array
    items:
      type: integer
  agentLicenseTypeFilter:
    name: agentLicenseType
    description: Filters Agent records by license type.
    in: query
    required: false
    type: array
    items:
      type: string
      enum:
        - None
        - SystemMonitorBasic
        - SystemMonitor
  loadBalancedFilter:
    name: isLoadBalanced
    description: Filters results by load balanced status of the component.
    in: query
    required: false
    type: array
    items:
      type: boolean
      enum:
        - True
        - False
  # mediatorFilter:
  #   name: mediatorId
  #   in: query
  #   required: false
  #   type: integer
  #   description: Filters by Mediator Id of the object.
  searchScopeFilter:
    name: searchScope
    description: Filters agents by search scope.
    in: query
    required: false
    type: array
    items:
      type: string
      enum:
        - SystemMonitorSearch
        - ParentEntitySearch
        - GlobalSearch
  versionFilter:
    name: version
    in: query
    description: The deployment version of the component.
    required: false
    type: string
    pattern: '(\d[6-9]?).?((\d[0-9]?).?){0,2}(\d[0-9]{0,4})'
  typeFilter:
    name: agentType
    in: query
    description: The type of agent.
    type: array
    required: false
    items:
      type: string
      enum:
        - None
        - Windows
        - Linux
        - Solaris
        - Aix
        - Hpux
        - All
  fetchAIERecordsFilter:
    name: fetchAIERecords
    description: Filters results by whether AIE records should be fetched.
    in: query
    required: false
    type: boolean
  virtualLogSourceFilter:
    name: isVirtual
    description: Filters results by whether the resource is virtual.
    in: query
    required: false
    type: array
    items:
      type: boolean
      enum:
        - True
        - False
  acceptanceModeFilter:
    name: acceptanceMode
    description: Filters log source results by acceptance mode.
    in: query
    required: false
    type: string
    enum:
      - All
      - Manual
      - Automatic
  userprofileOrderByFilter:
    name: orderBy
    description: Specifies a sort column - User Profile name or Id.
    in: query
    required: false
    type: string
    default: name
    enum:
      - name
      - id
  userOrderByFilter:
    name: orderBy
    description: Specifies a sort columns - User login or Id.
    in: query
    required: false
    type: string
    default: login
    enum:
      - login
      - id
  permissionFilter:
    name: canEdit
    description: Specifies if Write Only (true) or Read Only (false) Lists are required for a User.
    in: header
    required: False
    type: boolean
    x-nullable: true
  msgSourceAcceptanceID:
    in: path
    name: msgSourceAcceptanceID
    required: true
    type: integer
    description: The pending logsource Id stored in the database.
    minimum: -2147483647
    maximum: 2147483647
definitions:
  KeyValue:
    type: object
    properties:
      id:
        type: integer
        x-nullable: true
        x-omitempty: true
        maximum: 2147483647
        minimum: -2147483648
      name:
        type: string
        x-omitempty: true
  RequiredKeyValue:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        x-omitempty: true
  entityName:
    type: string
    description: The Entity name stored in the database.
    maxLength: 200
  logsourceName:
    type: string
    description: The log message source name stored in the database.
    maxLength: 200
  id:
    type: integer
    description: The Object Id generated by LogRhythm.
    maximum: 2147483647
    minimum: -2147483648
  recordStatus:
    type: string
    description: A record status of retired or active.
    enum:
      - Retired
      - Active
  logsourcestatus:
    type: string
    description: Status for enable, paused, or unregistered
    enum:
      - Paused
      - Enabled
      - Unregistered
  dateCreated:
    type: string
    format: date-time
    description: The date when the object was created. This is ignored when saving the records.
  dateUpdated:
    type: string
    format: date-time
    description: The date when the object was last modified. This is ignored when saving the records.
  longDesc:
    type: string
    description: A full description of the component.
    maxLength: 2000
    x-omitempty: true
  shortDesc:
    type: string
    description: A brief description of the component.
    maxLength: 255
    x-omitempty: true
  recordStatusName:
    type: string
    description: The database status.
    enum:
      - Retired
      - Active
    x-omitempty: true
  identityRecordStatusName:
    type: string
    description: The Identity status.
    enum:
      - Retired
      - Active
  riskThreshold:
    type: string
    description: The risk level.
    enum:
      - None
      - Low-Low
      - Low-Medium
      - Low-High
      - Medium-Low
      - Medium-Medium
      - Medium-High
      - High-Low
      - High-Medium
      - High-High
  hostZone:
    type: string
    description: The Host zones type.
    enum:
      - Internal
      - DMZ
      - External
  osType:
    type: string
    description: The OS type supported by LogRhythm.
    enum:
      - Unknown
      - Other
      - WindowsNT4
      - Windows2000Professional
      - Windows2000Server
      - Windows2003Standard
      - Windows2003Enterprise
      - Windows95
      - WindowsXP
      - WindowsVista
      - Linux
      - Solaris
      - AIX
      - HPUX
      - Windows
  HostRoleEnum:
    type: string
    description: The Host role.
    enum:
      - BusinessOwner
      - OperationsOwner
      - PrimaryAdministrator
      - SecondaryAdministrator
      - SecurityAdministrator
      - Auditor
  HostIdentifierTypeEnum:
    type: string
    description: The Host Identifier type.
    enum:
      - IPAddress
      - DNSName
      - WindowsName
  ListType:
    type: string
    description: The list type.
    enum:
      - Application
      - Classification
      - CommonEvent
      - Host
      - Location
      - MsgSource
      - MsgSourceType
      - MPERule
      - Network
      - User
      - GeneralValue
      - Entity
      - RootEntity
      - IP
      - IPRange
      - Identity
  ListItemDataType:
    type: string
    description: The list item data type.
    enum:
      - List
      - Int32
      - String
      - PortRange
      - IP
      - IPRange
  ListItemType:
    type: string
    description: The list item type.
    enum:
      - List
      - KnownService
      - Classification
      - CommonEvent
      - KnownHost
      - IP
      - IPRange
      - Location
      - MsgSource
      - MsgSourceType
      - MPERule
      - Network
      - StringValue
      - Port
      - PortRange
      - Protocol
      - HostName
      - ADGroup
      - Entity
      - RootEntity
      - DomainOrigin
      - Hash
      - Policy
      - VendorInfo
      - Result
      - ObjectType
      - CVE
      - UserAgent
      - ParentProcessId
      - ParentProcessName
      - ParentProcessPath
      - SerialNumber
      - Reason
      - Status
      - ThreatId
      - ThreatName
      - SessionType
      - Action
      - ResponseCode
      - Identity
  UseContext:
    type: string
    description: The use contexts type.
    enum:
      - None
      - Address
      - DomainImpacted
      - Group
      - HostName
      - Message
      - Object
      - Process
      - Session
      - Subject
      - URL
      - User
      - VendorMsgID
      - DomainOrigin
      - Hash
      - Policy
      - VendorInfo
      - Result
      - ObjectName
      - CVE
      - UserAgent
      - ParentProcessId
      - ParentProcessName
      - ParentProcessPath
      - SerialNumber
      - Reason
      - Status
      - ThreatId
      - ThreatName
      - SessionType
      - Action
      - ResponseCode
      - Command
      - MACAddress
  RecordPermission:
    type: string
    description: The permission level.
    enum:
      - Private
      - PublicAll
      - PublicGlobalAdmin
      - PublicGlobalAnalyst
      - PublicRestrictedAnalyst
      - PublicRestrictedAdmin
  LogInterface:
    type: string
    description: The log interface or log message source format.
    enum:
      - NotApplicable
      - Syslog
      - Netflow
      - ASCIIFlatFile
      - WindowsEventLog
      - LogRhythmFileMonitor
      - UniversalDatabaseLogAdapter
      - CheckpointFirewall
      - CheckpointLogServer
      - CiscoSDEE
      - WindowsVistaEventLog
      - DataLossDefender
      - UserActivityMonitor
      - SNMPTrapReceiver
      - ProcessMonitor
      - NetworkConnectionMonitor
      - QualysVulnerabilitySource
      - sFlow
      - NetAppEventLog
      - NessusVulnerabilitySource
      - NeXposeVulnerabilitySource
      - MetasploitPenetrationSource
      - eStreamerSource
      - RetinaSource
      - RetinaCsSource
      - CheckpointFirewallAuditLog
      - AIEEvents
      - RegistryIntegrityMonitor
      - WindowsVistaEventLogSlim
      - IP360VulnerabilitySource
      - AWSCloudTrailSource
      - CradlePointSource
      - AWSCloudWatchSource
      - AWSS3Source
      - AWSCloudConfig
      - SalesforceSource
      - OktaSource
      - NessusCloudSource
      - BoxSource
      - Office365Source
      - TenableSecurityCenterSource
      - AWSCloudTrailS3Source
  MessageSourcetypeScope:
    type: string
    description: The permission level of log message source type.
    enum:
      - Group
      - Public
      - System
  CompressionType:
    type: string
    enum:
      - none
      - gzip
      - tar
      - targzip
      - bzip2
      - gzip (partitioned file)
    default: none
  UdlaStateFieldType:
    type: string
    enum:
      - None
      - Increment
      - Timestamp
    default: Increment
  ArchiveMode:
    type: string
    enum:
      - Override_NoArchive
      - Override_Archive
      - UseDefault
  MPEProcessingMode:
    type: string
    description: The name of the available MPE processsing modes.
    enum:
      - NoRulesProcessing
      - EventForwardingEnabled
      - EventForwardingDisabled
  MessageSourceAcceptanceMode:
    type: string
    enum:
      - Manual
      - Automatic
  EntitySummary:
    type: object
    description: A summary of Entity details.
    required:
      - id
      - name
    properties:
      id:
        $ref: '#/definitions/id'
      parentEntityName:
        type: string
        description: The Parent Entity full name stored in the database.
        maxLength: 200
        x-omitempty: true
      name:
        type: string
        description: Name of the Entity
        maxLength: 200
        x-omitempty: true
      fullName:
        type: string
        description: >-
          A full representation of the Entity as child with its parent Entity.
        maxLength: 410
        x-omitempty: true
      abbreviation:
        type: string
        x-nullable: true
        x-omitempty: true
        maxLength: 20
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      longDesc:
        $ref: '#/definitions/longDesc'
      shortDesc:
        $ref: '#/definitions/shortDesc'
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
  Entity:
    type: object
    allOf:
      - $ref: '#/definitions/EntitySummary'
    properties:
      childEntities:
        type: array
        items:
          $ref: '#/definitions/EntitySummary'
  NetworkBatch:
    type: object
    required:
      - id
      - riskLevel
      - threatLevel
      - recordStatus
      - hostZone
    properties:
      id:
        $ref: '#/definitions/id'
      riskLevel:
        $ref: '#/definitions/riskThreshold'
      threatLevel:
        $ref: '#/definitions/riskThreshold'
      recordStatus:
        $ref: '#/definitions/recordStatus'
      hostZone:
        $ref: '#/definitions/hostZone'
      location:
        type: integer
        description: The location Id of the Network.
        x-nullable: true
        x-omitempty: true
  Network:
    type: object
    allOf:
      - $ref: '#/definitions/NetworkSummary'
    properties:
      id:
        $ref: '#/definitions/id'
  NetworkSummary:
    type: object
    required:
      - name
      - entity
      - recordStatusName
      - riskLevel
      - threatLevel
      - hostZone
      - bip
      - eip
    properties:
      entity:
         $ref: '#/definitions/KeyValue'
      name:
        type: string
        description: The name of the Network.
        maxLength: 200
        x-omitempty: true
      shortDesc:
        $ref: '#/definitions/shortDesc'
      longDesc:
        $ref: '#/definitions/longDesc'
      riskLevel:
        $ref: '#/definitions/riskThreshold'
      threatLevel:
        $ref: '#/definitions/riskThreshold'
      threatLevelComment:
        type: string
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      hostZone:
        $ref: '#/definitions/hostZone'
      location:
        $ref: '#/definitions/KeyValue'
      bip:
        type: string
        maxLength: 45
      eip:
        type: string
        maxLength: 45
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
  HostSummary:
    type: object
    required:
      - name
      - riskLevel
      - hostZone
      - recordStatusName
      - os
      - useEventlogCredentials
      - entity
    properties:
      id:
        $ref: '#/definitions/id'
      entity:
        $ref: '#/definitions/KeyValue'
      name:
        type: string
        description: The name of the Host.
        maxLength: 200
      shortDesc:
        $ref: '#/definitions/shortDesc'
      longDesc:
        $ref: '#/definitions/longDesc'
      riskLevel:
        $ref: '#/definitions/riskThreshold'
      threatLevel:
        $ref: '#/definitions/riskThreshold'
      threatLevelComments:
        type: string
        description: Threat level comments
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      hostZone:
        $ref: '#/definitions/hostZone'
      location:
        $ref: '#/definitions/KeyValue'
      os:
        $ref: '#/definitions/osType'
      osVersion:
        type: string
        x-omitempty: true
        maxLength: 100
      eventlogUsername:
        type: string
        x-omitempty: true
        maxLength: 512
      eventlogPassword:
        type: string
        format: password
        x-omitempty: true
        maxLength: 512
      useEventlogCredentials:
        type: boolean
      osType:
        type: string
        description: The Agent server type on which the OS is installed.
        enum:
          - None
          - Server
          - Desktop
        default: Server
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
  MessageSourceDateFormatSummary:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      name:
        type: string
        description: The name of the date format.
        maxLength: 50
      regex:
        type: string
        description: The regex of the date format.
        maxLength: 100
      longDesc:
        $ref: '#/definitions/longDesc'
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
  LogSourceVirtualTemplate:
    type: object
    required:
      - id
      - name
      - description
    properties:
      id:
        $ref: '#/definitions/id'
      name:
        type: string
        description: The name of the Log Source Virtualization template.
        maxLength: 100
      description:
        type: string
        description: A description of the Log Source Virtualization template.
        maxLength: 255
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
  LogSourceVirtualTemplateItem:
    type: object
    required:
      - id
      - name
      - regex
    properties:
      id:
        $ref: '#/definitions/id'
      name:
        type: string
        description: The name of the Log Source Virtualization template item.
        maxLength: 100
      regex:
        type: string
        description: The regex of the Log Source Virtualization template item.
      logsourceType:
        $ref: '#/definitions/KeyValue'
      mpePolicy:
        $ref: '#/definitions/KeyValue'
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
  LogSourceVirtualTemplateToItem:
    type: object
    required:
      - id
      - sortOrder
      - item
    properties:
      id:
        $ref: '#/definitions/id'
      sortOrder:
        type: integer
        description: The sort order of the item inside the Log Source Virtualization template. The order is used for pattern matching.
      item:
        $ref: '#/definitions/LogSourceVirtualTemplateItem'
  HostSummaryBatch:
    type: object
    required:
      - id
      - riskLevel
      - threatLevel
      - hostZone
    properties:
      id:
        $ref: '#/definitions/id'
      riskLevel:
        $ref: '#/definitions/riskThreshold'
      threatLevel:
        $ref: '#/definitions/riskThreshold'
      hostZone:
        $ref: '#/definitions/hostZone'
      location:
        type: integer
        description: The location Id of the Network.
        x-nullable: true
        x-omitempty: true
      os:
        type: string
      osVersion:
        type: string
        x-omitempty: true
        maxLength: 100
      eventlogUsername:
        type: string
        x-omitempty: true
        maxLength: 512
      eventlogPassword:
        type: string
        format: password
        x-omitempty: true
        maxLength: 512
  Host:
    type: object
    allOf:
      - $ref: '#/definitions/HostSummary'
    properties:
      hostRoles:
        type: array
        items:
          $ref: '#/definitions/AssociatedRolesToHost'
      hostIdentifiers:
        type: array
        items:
          $ref: '#/definitions/HostIdentifier'
      parentEntityID:
        type: integer
        x-nullable: true
        x-omitempty: true
  HostToHostRole:
    type: object
    properties:
      hostId:
        $ref: '#/definitions/id'
      hostRoles:
        type: array
        items:
          $ref: '#/definitions/HostRoleToUser'
  HostRoleToUser:
    type: object
    properties:
      hostRole:
        $ref: '#/definitions/HostRoleEnum'
      users:
        type: array
        items:
          $ref: '#/definitions/id'
  AssociatedRolesToHost:
    type: object
    properties:
      hostRole:
        $ref: '#/definitions/HostRoleEnum'
      users:
        type: array
        items:
          type: string
  HostIdentifier:
    type: object
    properties:
      type:
        $ref: '#/definitions/HostIdentifierTypeEnum'
      value:
        type: string
      dateAssigned:
        x-omitempty: true
        x-nullable: true
        type: string
        format: date-time
      dateRetired:
        x-omitempty: true
        x-nullable: true
        type: string
        format: date-time
  HostToHostIdentifiers:
    type: object
    properties:
      hostIdentifiers:
        type: array
        items:
          $ref: '#/definitions/HostIdentifier'
  HostUploadSummary:
    type: object
    properties:
      Warning:
        type: object
      Error:
        type: object
      ImportMessage:
        type: string
  NetworkUploadSummary:
    type: object
    properties:
      Warning:
        type: object
      Error:
        type: object
      ImportMessage:
        type: string
  UploadSummary:
    type: object
    properties:
      isSuccessful:
        type: boolean
      message:
        type: string
      name:
        type: string
  StatusSummary:
    type: object
    properties:
      hostID:
        type: integer
      status:
        type: string
  ResponseSummary:
    type: object
    properties:
      networkID:
        type: integer
      status:
        type: integer
  IdentityResponseSummary:
    type: object
    properties:
      identityID:
        type: integer
      status:
        type: integer
  ListSummary:
    type: object
    required:
      - name
      - listType
      - autoImportOption
      - readAccess
      - writeAccess
      - entityName
      - restrictedRead
      - needToNotify
      - doesExpire
    properties:
      listType:
        $ref: '#/definitions/ListType'
      status:
        $ref: '#/definitions/recordStatus'
      name:
        type: string
      shortDescription:
        x-omitempty: true
        x-nullable: true
        type: string
      longDescription:
        x-omitempty: true
        x-nullable: true
        type: string
      useContext:
        type: array
        items:
          $ref: '#/definitions/UseContext'
      autoImportOption:
        $ref: '#/definitions/AutoImportOption'
      importFileName:
        x-omitempty: true
        x-nullable: true
        type: string
      id:
        $ref: '#/definitions/id'
      guid:
        type: string
        description: Unique ID of the list. This will be ignore when creating the new list and generate new unique identifier, also list will be updated if a matching item found based on guid.
      dateCreated:
        $ref: '#/definitions/dateCreated'
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
      revisitDate:
        x-omitempty: true
        x-nullable: true
        type: string
        format: date-time
      readAccess:
        $ref: '#/definitions/RecordPermission'
      writeAccess:
        $ref: '#/definitions/RecordPermission'
      restrictedRead:
        type: boolean
      entityName:
        $ref: '#/definitions/entityName'
      entryCount:
        type: integer
      timeToLiveSeconds:
        x-omitempty: true
        x-nullable: true
        type: integer
      needToNotify:
        type: boolean
      doesExpire:
        type: boolean
      owner:
        x-omitempty: true
        type: integer
  List:
    type: object
    allOf:
      - $ref: '#/definitions/ListSummary'
    properties:
      listItemsCount:
        type: integer
      items:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/ListItem'
  ListItem:
    type: object
    properties:
      displayValue:
        type: string
      expirationDate:
        x-nullable: true
        type: string
        format: date-time
      isExpired:
        type: boolean
      isListItem:
        type: boolean
      isPattern:
        type: boolean
      listItemDataType:
        $ref: '#/definitions/ListItemDataType'
      listItemType:
        $ref: '#/definitions/ListItemType'
      value:
        type: string
      valueAsListReference:
        x-omitempty: true
        x-nullable: true
        $ref: '#/definitions/ListReference'
  ListReference:
    type: object
    properties:
      listId:
        $ref: '#/definitions/id'
      guid:
        type: string
      listType:
        $ref: '#/definitions/ListType'
      name:
        type: string
  apiUserError:
    type: object
    properties:
      statusCode:
        type: integer
      name:
        type: string
      message:
        type: string
      source:
        type: string
      details:
        type: string
      upstreamError:
        type: string
  AutoImportOption:
    type: object
    properties:
      enabled:
        type: boolean
      usePatterns:
        type: boolean
      replaceExisting:
        type: boolean
  IdentityDisplayName:
    type: object
    properties:
      identityID:
        type: integer
      entityID:
        type: integer
      recordStatus:
        $ref: '#/definitions/identityRecordStatusName'
      dateUpdated:
        type: string
        format: date-time
      displayName:
        type: string # should contain email address for web indexer
  IdentityStatistics:
    type: object
    properties:
      identityCount:
        type: integer
      adAccountCount:
        type: integer
      adAccountUnafiliatedCount:
        type: integer
  IdentityAccountType:
    type: string
    description: The types of Identity Accounts that can be associated with an Identity.
    enum:
      - AD
      - Custom
  IdentitySyncAccount:
    type: object
    properties:
      thumbnailPhoto:
        type: string
        format: byte
      idmAccountID:
        type: integer
      vendorUniqueKey:
        type: string
      hasOwnerIdentity:
        type: boolean
      hasSameRootEntityAsTarget:
        type: boolean
      isPrimary:
        type: boolean
      accountType:
        $ref: '#/definitions/IdentityAccountType'
      login:
        type: string
      nameFirst:
        type: string
      nameMiddle:
        type: string
      nameLast:
        type: string
      displayIdentifier:
        type: string
      company:
        type: string
      department:
        type: string
      title:
        type: string
      manager:
        type: string
      addressCity:
        type: string
      domainName:
        type: string
      entity:
        $ref: '#/definitions/IdentityEntity'
      identifiers:
        type: array
        items:
          $ref: '#/definitions/IdentityIdentifier'
  IdentityAccount:
    type: object
    properties:
      idmAccountID:
        type: integer
      hasOwnerIdentity:
        type: boolean
      hasSameRootEntityAsTarget:
        type: boolean
      isPrimary:
        type: boolean
      accountType:
        $ref: '#/definitions/IdentityAccountType'
      login:
        type: string
      nameFirst:
        type: string
        maxLength: 50
      nameMiddle:
        type: string
        maxLength: 50
      nameLast:
        type: string
        maxLength: 50
      displayIdentifier:
        type: string
      company:
        type: string
        maxLength: 100
      department:
        type: string
        maxLength: 100
      title:
        type: string
        maxLength: 100
      manager:
        type: string
        maxLength: 255
      addressCity:
        type: string
        maxLength: 50
      domainName:
        type: string
      entity:
        $ref: '#/definitions/IdentityEntity'
      identifiers:
        type: array
        items:
          $ref: '#/definitions/IdentityIdentifier'
  IdentityGroup:
    type: object
    properties:
      name:
        type: string
  IdentifierSource:
    type: object
    properties:
      AccountName:
        type: string
      IAMName:
        type: string
  IdentityIdentifiers:
    type: object
    properties:
      identityID:
        type: integer
      nameFirst:
        x-nullable: true
        x-omitempty: true
        type: string
      nameMiddle:
        x-nullable: true
        x-omitempty: true
        type: string
      nameLast:
        x-nullable: true
        x-omitempty: true
        type: string
      title:
        x-nullable: true
        x-omitempty: true
        type: string
      department:
        x-nullable: true
        x-omitempty: true
        type: string
      company:
        x-nullable: true
        x-omitempty: true
        type: string
      manager:
        x-nullable: true
        x-omitempty: true
        type: string
      identifiers:
        type: array
        items:
          $ref: '#/definitions/IdentityIdentifier'
  IdentityIdentifierType:
    type: string
    description: Identifiers that can be associated with Identity accounts.
    enum:
      - Email
      - Login
  IdentityIdentifier:
    type: object
    required:
      - identifierType
      - value
    properties:
      identifierID:
        type: integer
      identifierType:
        $ref: '#/definitions/IdentityIdentifierType'
      value:
        type: string
        maxLength: 255
      recordStatus:
        $ref: '#/definitions/recordStatusName'
      source:
        x-omitempty: true
        x-nullable: true
        $ref: '#/definitions/IdentifierSource'
  IdentityEntity:
    type: object
    properties:
      entityId:
        type: integer
      rootEntityId: #DELETEME - This shipped in 7.4.0, but isn't being populated in DB query, should be removed from struct in 7.4.1
        type: integer
      path:
        type: string
      name:
        type: string
  IdentityTACSummary:
    type: object
    properties:
      id:
        type: integer
      nameFirst:
        type: string
      nameMiddle:
        type: string
      nameLast:
        type: string
      login1:
        type: string
      title:
        type: string
      addressCity:
        type: string
      department:
        type: string
      company:
        type: string
      manager:
        type: string
  Identity:
    type: object
    properties:
      identityID:
        type: integer
      nameFirst:
        type: string
      nameMiddle:
        type: string
      nameLast:
        type: string
      displayIdentifier:
        type: string
      company:
        type: string
      department:
        type: string
      title:
        type: string
      manager:
        type: string
      addressCity:
        type: string
      domainName:
        type: string
      entity:
        $ref: '#/definitions/IdentityEntity'
      dateUpdated:
        x-omitempty: true
        x-nullable: true
        type: string
        format: date-time
      recordStatus:
        $ref: '#/definitions/recordStatusName'
      identifiers:
        type: array
        items:
          $ref: '#/definitions/IdentityIdentifier'
      groups:
        type: array
        items:
          $ref: '#/definitions/IdentityGroup'
  IdentityBatch:
    type: object
    required:
      - identityID
    properties:
      identityID:
        type: integer
      nameFirst:
        type: string
      nameMiddle:
        type: string
      nameLast:
        type: string
      displayIdentifier:
        type: string
      company:
        type: string
      department:
        type: string
      title:
        type: string
      manager:
        type: string
      addressCity:
        type: string
      recordStatus:
        $ref: '#/definitions/recordStatusName'
  IdentitySummary:
    type: object
    properties:
      nameFirst:
        type: string
      nameMiddle:
        type: string
      nameLast:
        type: string
      displayIdentifier:
        type: string
      company:
        type: string
      department:
        type: string
      title:
        type: string
      manager:
        type: string
      addressCity:
        type: string
      recordStatus:
        $ref: '#/definitions/recordStatusName'
  IdentityForIdentityLists:
    type: object
    properties:
      id:
        type: integer
      primaryLogin:
        type: string
      accounts:
        type: array
        items:
          type: object
          properties:
            idmAccountID:
              type: integer
            hasOwnerIdentity:
              type: boolean
            hasSameRootEntityAsTarget:
              type: boolean
            isPrimary:
              type: boolean
            accountType:
              $ref: '#/definitions/IdentityAccountType'
            login:
              type: string
            nameFirst:
              type: string
            nameMiddle:
              type: string
            nameLast:
              type: string
            company:
              type: string
            department:
              type: string
            title:
              type: string
            manager:
              type: string
            addressCity:
              type: string
            domainName:
              type: string
            entity:
              $ref: '#/definitions/IdentityEntity'
            identifiers:
              type: array
              items:
                type: object
                properties:
                  idmIdentifierID:
                    type: integer
                  identifierType:
                    $ref: '#/definitions/IdentityIdentifierType'
                  value:
                    type: string
  RecordCounts:
    type: object
    properties:
      totalCount:
        type: integer
      filteredCount:
        type: integer
  Location:
    type: object
    properties:
      Name:
        type: string
      Id:
        type: integer
      ParentLocationId:
        type: integer
      LocationType:
        type: string
        description: Type of location
        enum:
          - Country
          - Region
          - City
  LocationDetail:
    type: object
    properties:
      Name:
        type: string
      Id:
        type: integer
      ParentLocationId:
        type: integer
      LocationType:
        type: string
        description: Type of location
        enum:
          - Country
          - Region
          - City
      FullName:
        type: string
  MessageSourceTypeSummary:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      name:
        type: string
        description: The name of the log message source type.
        maxLength: 200
      fullName:
        type: string
        description: The concatenated name of the log message source type and log source.
        maxLength: 400
      abbreviation:
        type: string
        maxLength: 20
      shortDesc:
        $ref: '#/definitions/shortDesc'
      longDesc:
        $ref: '#/definitions/longDesc'
      parentMessageSourceTypeId:
        x-omitempty: true
        x-nullable: true
        type: integer
      isMST:
        $ref: '#/definitions/MessageSourcetypeScope'
      messageSourceFormat:
        $ref: '#/definitions/LogInterface'
      status:
        $ref: '#/definitions/recordStatus'
      hostWizDefault:
        x-omitempty: true
        type: string
        maxLength: 500
      dateUpdated:
        type: string
        format: date-time
  MPEPolicy:
    type: object
    required:
      - id
      - name
      - messageSourceTypeID
      - allowAutoSort
      - ruleTimeout
    properties:
      id:
        $ref: '#/definitions/id'
      name:
        type: string
        description: The name of MPE policy.
        maxLength: 50
      messageSourceTypeID:
        $ref: '#/definitions/id'
      messageSourceTypeName:
        type: string
        description: The name of the log message source type the MPE policy is tagged to.
        readOnly: true
      recordType:
        type: string
        description: Record type
        default: System
        enum:
          - System
          - Custom
        readOnly: true
      shortDesc:
        $ref: '#/definitions/shortDesc'
      longDesc:
        $ref: '#/definitions/longDesc'
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      dateUpdated:
        type: string
        format: date-time
      allowAutoSort:
        type: boolean
        description: Allows automatic MPE Rule sorting.
      ruleTimeout:
        type: integer
        description: The time out in milliseconds for MPE Rules in the policy.
      updatedBy:
        type: integer
        description: The Id of the User who created or updated the policy.
        readOnly: true
        x-omitempty: true
  User:
    type: object
    allOf:
      - $ref: '#/definitions/UserLite'
    properties:
      id:
        $ref: '#/definitions/id'
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      dateUpdated:
        type: string
        format: date-time
        x-nullable: true
        x-omitempty: true
      objectPermissions:
        $ref: '#/definitions/ObjectPermissions'
        x-nullable: true
        x-omitempty: true
  UserLite:
    type: object
    required:
      - userType
    properties:
      firstName:
        type: string
        description: The first name of the User.
        maxLength: 50
      middleName:
        type: string
        description: The middle name of the User.
        maxLength: 10
        x-omitempty: true
      lastName:
        type: string
        description: The last name of the User.
        maxLength: 100
      abbreviation:
        type: string
        description: Abbreviation used by User
        maxLength: 20
        x-omitempty: true
      userType:
        type: string
        description: The User type as role or individual.
        default: Individual
        enum:
          - Role
          - Individual
      shortDesc:
        $ref: '#/definitions/shortDesc'
      longDesc:
        $ref: '#/definitions/longDesc'
      adGroup:
        type: string
        description: The Active Directory group of the User.
        maxLength: 255
        x-omitempty: true
      adDomain:
        type: string
        description: The Active Directory domain of the User.
        maxLength: 255
        x-omitempty: true
      userPrincipalName:
        type: string
        description: The User's principal name.
        maxLength: 255
        x-omitempty: true
      fullName:
        type: string
        description: The full name of the User or Role. Full name is ignored while creating a new User it will be {LastName, Firstname}. This is mandatory field when creating new Role.
        maxLength: 200
        x-omitempty: true
      objectPermissions:
        $ref: '#/definitions/ObjectPermissionsLite'
        x-nullable: true
        x-omitempty: true
  LoginLite:
    type: object
    required:
      - login
      - userProfileId
      - defaultEntityId
      - userId
    properties:
      login:
        type: string
        description: Login of User
        maxLength: 900
        minLength: 6
        x-omitempty: true
      userProfileId:
        type: integer
        description: The User Profile associated with the User.
        x-omitempty: true
      userId:
        type: integer
        description: The User Id associated with the User.
        x-omitempty: true
      defaultEntityId:
        type: integer
        description: The default Entity of the User.
        x-omitempty: true
      password:
        type: string
        x-omitempty: true
        description: Password for current User. We will never expose password in GET calls
        maxLength: 128
        minLength: 8
        format: password
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
  LoginLiteMin:
    type: object
    required:
      - login
      - userProfileId
      - defaultEntityId
    properties:
      login:
        type: string
        description: Login of User
        maxLength: 900
        minLength: 5
        x-omitempty: true
      userProfileId:
        type: integer
        description: The User Profile associated with the User.
        x-omitempty: true
      defaultEntityId:
        type: integer
        description: The default Entity of the User.
        x-omitempty: true
      password:
        type: string
        x-omitempty: true
        description: Password for current User. We will never expose password in GET calls
        maxLength: 128
        minLength: 8
  LoginLiteSummary:
    type: object
    required:
      - login
      - userProfileId
      - defaultEntityId
    properties:
      login:
        type: string
        description: Login of User
        maxLength: 900
        minLength: 5
        x-omitempty: true
      userProfileId:
        type: integer
        description: The User Profile associated with the User.
        x-omitempty: true
      defaultEntityId:
        type: integer
        description: The default Entity of the User.
        x-omitempty: true
      password:
        type: string
        x-omitempty: true
        description: Password for current User. We will never expose password in GET calls
        maxLength: 128
        minLength: 8
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
  Login:
    type: object
    allOf:
      - $ref: '#/definitions/LoginLite'
    properties:
      dateUpdated:
        type: string
        format: date-time
        x-nullable: true
        x-omitempty: true
      dateCreated:
        type: string
        format: date-time
        x-nullable: true
        x-omitempty: true
        description: The date when the object was created. This is ignored when saving the records.
      entities:
        type: array
        items:
          $ref: '#/definitions/EntitySummaryLite'
  EntitySummaryLite:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        description: The Entity Id.
        x-nullable: true
        x-omitempty: true
      name:
        type: string
        description: The Entity name.
        maxLength: 200
        x-omitempty: true
  LogSourceIdentifier:
    type: object
    properties:
      type:
        $ref: '#/definitions/HostIdentifierTypeEnum'
      value:
        type: string
      hostIdentifierID:
        type: integer
      msgSourceID:
        type: integer
  PendingLogsource:
    type: object
    allOf:
      - $ref: '#/definitions/PendingLogsourceSummary'
    properties:
      resolveKnownHostEntity:
        $ref: '#/definitions/KeyValue'
        x-omitempty: true
      msgSourceAcceptanceID:
        $ref: '#/definitions/id'
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
      lastRequestDate:
        $ref: '#/definitions/dateUpdated'
  PendingLogsourceSummary:
    type: object
    properties:
      systemMonitorId:
        $ref: '#/definitions/id'
      name:
        $ref: '#/definitions/logsourceName'
      LogHostName:
        type: string
        maxLength: 255
        x-omitempty: true
      logSourceType:
        $ref: '#/definitions/KeyValue'
        x-omitempty: true
      mpePolicy:
        $ref: '#/definitions/KeyValue'
        x-omitempty: true
      ip:
        type: string
        maxLength: 45
      resolveKnownHost:
        $ref: '#/definitions/KeyValue'
        x-omitempty: true
      latestLogMsg:
        type: string
      searchScope:
        type: string
        enum:
          - SystemMonitorSearch
          - ParentEntitySearch
          - GlobalSearch
      searchResult:
        type: string
        enum:
          - SingleMsgSource
          - NoMsgSources
          - MultipleMsgSources
      reasonDuplicateMsgSourceIds:
        type: string
        maxLength: 255
        x-omitempty: true
      acceptanceStatus:
        type: string
        description: The acceptance status of the pending record.
        enum:
          - Incomplete
          - Pending
          - Rejected
      logInterfaceType:
        readOnly: true
        $ref: '#/definitions/LogInterface'
      collectionHost:
        type: string
      silentLogSourceDetection:
        $ref: '#/definitions/SilentLogSourceDetection'
        x-omitempty: true
  Logsource:
    type: object
    required:
      - systemMonitorId
      - logSourceType
      - host
      - name
      - mpeProcessingMode
    properties:
      id:
        $ref: '#/definitions/id'
      systemMonitorId:
        $ref: '#/definitions/id'
      name:
        $ref: '#/definitions/logsourceName'
      host:
        $ref: '#/definitions/KeyValue'
      entity:
        $ref: '#/definitions/KeyValue'
      logSourceType:
        $ref: '#/definitions/KeyValue'
      mpePolicy:
        $ref: '#/definitions/KeyValue'
      shortDescription:
        $ref: '#/definitions/shortDesc'
      longDescription:
        $ref: '#/definitions/longDesc'
      recordStatus:
        $ref: '#/definitions/recordStatus'
        default: "Active"
      status:
        $ref: '#/definitions/logsourcestatus'
        default: "Enabled"
      isVirtual:
        type: boolean
        enum:
          - true
          - false
        default: false
      logSourceIdentifiers:
        type: array
        items:
          $ref: '#/definitions/LogSourceIdentifier'
        x-omitempty: true
      logMartMode:
        type: integer
      isLoadBalanced:
        type: boolean
        enum:
          - true
          - false
        default: false
      mpeProcessingMode:
        $ref: '#/definitions/MPEProcessingMode'
      isArchivingEnabled:
        type: boolean
        enum:
          - true
          - false
        default: false
      maxMsgCount:
        type: integer
        minimum: 1
        maximum: 10000
        default: 100
      defMsgTTLValue:
        type: integer
      dateUpdated:
        $ref: '#/definitions/dateUpdated'
      isSilentLogSourceEnabled:
        type: boolean
        enum:
          - true
          - false
        default: false
      msgSourceDateFormatID:
        type: integer
        x-nullable: true
        x-omitempty: true
      filePath:
        type: string
        x-omitempty: true
      cryptoMode:
        type: integer
      signMode:
        type: integer
      monitorStart:
        x-omitempty: true
        x-nullable: true
        type: string
        format: date-time
      monitorStop:
        x-omitempty: true
        x-nullable: true
        type: string
        format: date-time
      defMsgTTL:
        type: integer
      defMsgArchiveMode:
        $ref: '#/definitions/ArchiveMode'
        readOnly: true
      msgPerCycle:
        type: integer
        default: 100
      collectionDepth:
        type: integer
      udlaConnectionString:
        type: string
        x-omitempty: true
      udlaStateField:
        type: string
        x-omitempty: true
      udlaStateFieldType:
        $ref: '#/definitions/UdlaStateFieldType'
      udlaStateFieldConversion:
        type: string
        x-omitempty: true
      udlaQueryStatement:
        type: string
        x-omitempty: true
      udlaOutputFormat:
        type: string
        x-omitempty: true
      udlaUniqueIdentifier:
        type: string
        x-omitempty: true
      udlaMsgDateField:
        type: string
        x-omitempty: true
      udlaGetUTCDateStatement:
        type: string
        x-omitempty: true
      parameter1:
        type: integer
        x-nullable: true
        x-omitempty: true
      parameter2  :
        type: integer
        x-nullable: true
        x-omitempty: true
      parameter3:
        type: integer
        x-nullable: true
        x-omitempty: true
      parameter4:
        type: integer
        x-nullable: true
        x-omitempty: true
      parameter5:
        type: integer
        x-nullable: true
        x-omitempty: true
      parameter6:
        type: string
        x-omitempty: true
      parameter7:
        type: string
        x-omitempty: true
      parameter8:
        type: string
        x-omitempty: true
      parameter9:
        type: string
        x-omitempty: true
      parameter10:
        type: string
        x-omitempty: true
      msgRegexStart:
        type: string
        x-omitempty: true
      msgRegexDelimeter:
        type: string
        x-omitempty: true
      msgRegexEnd:
        type: string
        x-omitempty: true
      recursionDepth:
        type: integer
      isDirectory:
        type: boolean
        enum:
          - true
          - false
        default: false
      inclusions:
        type: string
        x-omitempty: true
      exclusions:
        type: string
        x-omitempty: true
      compressionType:
        $ref: '#/definitions/CompressionType'
      udlaConnectionType:
        type: integer
        x-nullable: true
        x-omitempty: true
      collectionThreadTimeout:
        type: integer
        minimum: 0
        maximum: 600
        default: 120
      virtualSourceRegex:
        type: string
        x-omitempty: true
      virtualSourceSortOrder:
        type: integer
      virtualSourceCatchAllID:
        type: integer
      persistentConnection:
        type: boolean
        enum:
          - true
          - false
        default: false
      autoAcceptanceRuleId:
        $ref: '#/definitions/MessageSourceAcceptanceMode'
      maxLogDate:
        type: string
        format: date-time
      virtualLogSourceParentID:
        type: integer
        x-nullable: true
        x-omitempty: true
      virtualLogSourceName:
        type: string
        x-omitempty: true
  AlarmNfnGroup:
    type: object
    allOf:
      - $ref: '#/definitions/AlarmNfnGroupSummary'
    required:
      - name
    properties:
      id:
        type: integer
        description: The Notification Group Id stored in the system.
      dateUpdated:
        type: string
        format: date-time
        description: The date when the Notification Group was modified. Shows creation date if recently created.
        x-omitempty: true
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      totalUsers:
        type: integer
        description: The number of Users associated with a group.
        x-omitempty: true
  AlarmNfnGroupSummary:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: The Notification Group name.
        maxLength: 50
      shortDescription:
        type: string
        description: A short description of the Notification Group.
        maxLength: 255
        x-omitempty: true
      longDescription:
        type: string
        description: A detailed description of the Notification Group.
        maxLength: 2000
        x-omitempty: true
  UserProfileSummary:
    type: object
    required:
      - name
      - dataProcessorAccessMode
      - securityRole
    properties:
      id:
        type: integer
        description: The User Profile Id stored in the system.
      name:
        type: string
        description: The User Profile name.
        minLength: 1
        maxLength: 100
        x-omitempty: true
      shortDescription:
        type: string
        description: A short description of the User Profile.
        maxLength: 255
        x-omitempty: true
      longDescription:
        type: string
        description: A detailed description of the User Profile.
        maxLength: 2000
        x-omitempty: true
      dataProcessorAccessMode:
        type: string
        description: Data Processor access mode for the User Profile.
        enum:
          - None
          - All
          - Specific
          - OnlineActive
          - OnlineArchive
        x-omitempty: true
      securityRole:
        type: string
        description: The User Profile Role type. Customers can create only GlobalAdmin, GlobalAnalyst, RestrictedAdmin and RestrictedAnalysts profiles, according to their permissions.
        enum:
          - None
          - GlobalAdmin
          - GlobalAnalyst
          - GlobalMedSvr
          - GlobalMPE
          - GlobalARM
          - RestrictedAnalyst
          - SuperUser
          - WebServiceAdmin
          - GlobalWebUI
          - RestrictedAdmin
        x-omitempty: true
      adgroupNotificationGroupName:
        type: string
        description: The AD Notification Group name.
        x-omitempty: true
      adgroupNotificationGroupId:
        type: integer
        description: The AD Notification Group Id.
        x-omitempty: true
        x-nullable: true
      shouldSyncADgroupContacts:
        type: boolean
        description: Syncs AD group contacts if checked.
        x-omitempty: true
      ProfileType:
        type: string
        description: Indicates allowed profile or denied profile. Access to log sources associated with an allowed Entity is based on User profile type.
        enum:
          - Allow
          - Deny
        x-omitempty: true
      dateUpdated:
        type: string
        format: date-time
        description: The date when the Notifcation Group was modified. Shows creation date if recently created.
        x-omitempty: true
      totalAssociatedUsers:
        type: integer
        description: The number of users associated with the Profile.
        x-omitempty: true
  UserProfile:
    type: object
    allOf:
      - $ref: '#/definitions/UserProfileSummary'
    properties:
      adGroupsPermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/UserProfileADGroup'
      entityPermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/UserProfileEntityPermSummary'
      dataProcessorsPermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/UserProfileDPPerm'
      logsourceListPermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/UserProfileLSListPerm'
      logSourcePermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/UserProfileLSPerm'
      privileges:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/UserProfilePrivilege'
      smartResponsePluginsPermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/ObjectToUserProfileMapping'
      notificationGroupsPermissions:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/NotificationGroupToUserProfileMapping'
  UserProfileADGroup:
    type: object
    properties:
      domainId:
        type: integer
        description: The Active Directory domain Id.
      domainName:
        type: string
        description: The Active Directory domain name.
        x-omitempty: true
      groupId:
        type: integer
        description: The Active Directory group Id.
      groupName:
        type: string
        description: The Active Directory group name.
        x-omitempty: true
  UserProfileEntityPermSummary:
    type: object
    properties:
      id:
        type: integer
        description: The Entity Id associated with the User Profile.
      name:
        type: string
        description: The name of the Entity.
        x-omitempty: true
  UserProfileDPPerm:
    type: object
    properties:
      id:
        type: integer
        description: The Data Processor associated with the User Profile.
      name:
        type: string
        description: The name of the Data Processor.
        x-omitempty: true
  UserProfileLSListPerm:
    type: object
    properties:
      id:
        type: integer
        description: The list associated with the User Profile.
      name:
        type: string
        description: The name of the list.
        x-omitempty: true
  UserProfileLSPerm:
    type: object
    properties:
      id:
        type: integer
        description: The list associated with the User Profile.
      name:
        type: string
        description: The name of the list.
        x-omitempty: true
  UserProfilePrivilegeDetail:
    type: object
    properties:
      id:
        type: integer
        description: The Privilege Id in the system.
      key:
        type: string
        description: The key to identify the privilege.
        x-omitempty: true
      name:
        type: string
        description: The privilege description.
        x-omitempty: true
  UserProfilePrivilege:
    type: string
    description: The privilege key.
    x-omitempty: true
    enum:
    - ShowDeploymentManager
    - ShowEntityMgr
    - EntityMgmt
    - ShowAgentAgentMgr
    - AgentMgmt
    - ShowLSMgr
    - LSMgmt
    - ShowAlarmMgr
    - AlarmMgmt
    - ShowListMgr
    - ListMgmt
    - ShowPersonalDashboard
    - ShowInvestigation
    - ShowTails
    - ReportMgmt
    - ScheduleReport
    - MPERuleBuilderMgmt
    - CommonEventMgmt
    - AgentPackageMgmt
    - AgentConfigMgmt
    - ReOrgMgmt
    - MyPreferenceMgmt
    - PersonalAlarmMgmt
    - ShowLicenseReport
    - SecondLookMgmt
    - DPMgmt
    - PMMgmt
    - AieServerMgmt
    - AIeWorkLoadMgmt
    - AIERuleMgmt
    - NMMgmt
    - LPPMgmt
    - UserProfileMgmt
    - UserMgmt
    - ShowDepMon
    - ApplicationMgmt
    - LSTMgmt
    - ADManagement
    - CEChangeMgmt
    - KBMgmt
    - WHWMgmt
    - GlprMgmt
    - DmrMgmt
    - SrpMgmt
    - DldpolicyMgmt
    - FimMgmt
    - RimMgmt
    - LsvMgmt
    - AalprMgmt
    - OpMgmt
    - SecurityMgmt
    - NotificationMgmt
    - LdsMgmt
    - LdsServiceMgmt
    - AutomaticlsconfigMgmt
    - AIEActionsMgmt
    - AlarmActionsMgmt
    - FilterMgmt
    - AgentConfigMgmtUpsert
    - AieEngineMgmt
    - ImportLicensefile
    - CloudAIAccess
    - GlobalAIEEventsAccess
    - LogRhythmAPIAccess
    - CaseMgmtAccess
    - TrueIdentityMgmt
    - DBUsageWidgetWC
    - ComponentStatusWidgetWC
    - ProcessingWidgetWC
    - ThreatMapWidgetWC
    - ManageTagsWC
    - ManageCaseWidgetsWC
    - ManageAllCasesWC
  ObjectToUserProfileMapping:
    type: object
    properties:
      id:
        type: integer
        description: The SmartResponse plugin Id.
      name:
        type: string
        description: The name of the SmartResponse plugin.
        x-omitempty: true
  NotificationGroupToUserProfileMapping:
    type: object
    properties:
      id:
        type: integer
        description: notification group id
      name:
        type: string
        description: Name of the notification group
        x-omitempty: true
  LicenseType:
    type: string
    description: The license Types for LR components.
    enum:
      - Master
      - Marc
      - MediatorSoftware
      - SystemMonitor
      - MessageSource
      - MediatorAppliance
      - UnlimitedMessageSourceSoftware
      - UnlimitedMessageSourceAppliance
      - SystemMonitorBasic
      - GeolocationIPResolution
      - AdvancedIntelligenceEngine
      - NetworkMonitor
      - LMMessagepersecond
      - DeploymentMessagespersecond
      - SystemMonitorCollector
  SearchScope:
    type: string
    description: The search scope for Agents.
    enum:
      - SystemMonitorSearch
      - ParentEntitySearch
      - GlobalSearch
    default: ParentEntitySearch
  LastHeartbeat:
    type: string
    format: date-time
    description: The time of component's last heartbeat.
  Version:
    type: string
    description: The component's version
  AgentOSType:
    type: string
    description: The Agent server type on which the OS is installed.
    enum:
      - None
      - Server
      - Desktop
    default: None
  AgentType:
    type: string
    description: The type of agent.
    enum:
      - None
      - Windows
      - Linux
      - Solaris
      - Aix
      - Hpux
      - All
    default: Windows
  AgentSummaryLite:
    type: object
    required:
      - name
      - hostId
    description: The summary of an agent.
    properties:
      id:
        $ref: '#/definitions/id'
      guid:
        type: string
        format: uuid
        x-nullable: true
      name:
        type: string
        description: The name of the System Monitor.
        maxLength: 255
      hostName:
        type: string
        description: The Host name on which the Agent is installed.
        maxLength: 255
        readOnly: true
      hostId:
        type: integer
        description: The Host Id of the Agent.
        x-required: true
        x-omitempty: true
        x-writeOnly: true
      hostEntity:
        type: string
        description: The Entity for the Host the Agent is installed on.
        maxLength: 200
        readOnly: true
      agentType:
        $ref: '#/definitions/AgentType'
      syslogEnabled:
        type: boolean
        description: The syslog status for the Agent.
        enum:
          - true
          - false
        default: false
      netflowEnabled:
        type: boolean
        description: The status for the IPFIX/Netflow server.
        enum:
          - true
          - false
        default: false
      recordStatusName:
        $ref: '#/definitions/recordStatusName'
      dateUpdated:
        description: The date the agent was updated.
        x-omitempty: true
        type: string
        format: date-time
        readOnly: true
      licenseType:
        $ref: '#/definitions/LicenseType'
      os:
        type: string
        x-omitempty: true
        readOnly: true
        description: The OS type of the Host the Agent is installed on.
      osVersion:
        type: string
        x-omitempty: true
        x-nullable: true
        readOnly: true
        description: The OS version of the Host the Agent is installed on.
      searchScope:
        $ref: '#/definitions/SearchScope'
      # mediatorId:
      #   type: integer
      #   description: The Mediator to which Agent is connected.
      #   x-writeOnly: true
      #   x-omitempty: true
      sflowEnabled:
        type: boolean
        description: The SFlow status for the agent.
        readOnly: true
      isLoadBalanced:
        type: boolean
        description: The load balanced status for the agent.
      osType:
        $ref: '#/definitions/AgentOSType'
      fimPolicies:
        type: array
        description: The File Integrity Monitor Policy Ids for the agent.
        items:
          type: integer
        x-omitempty: true
      rimPolicies:
        type: array
        description: The Registry Integrity Monitor Policy Ids for the agent.
        items:
          type: integer
        x-omitempty: true
      dldPolicy:
        type: integer
        description: The Data Loss Defender Policy Id for the agent.
        x-nullable: true
        x-omitempty: true
      smConfigPolicy:
        type: string
        description: The System Monitor configuration policy name for the agent.
        x-nullable: true
        x-omitempty: true
        readOnly: true
      shortDesc:
        type: string
        description: A short description for the agent.
        x-nullable: true
        x-omitempty: true
        maxLength: 255
      longDesc:
        type: string
        description: A long description for the Agent.
        x-nullable: true
        x-omitempty: true
        maxLength: 2000
      activeLogSources:
        type: integer
        description: A count of active log sources for the Agent.
        x-omitempty: true
        x-nullable: true
        readOnly: true
      inActiveLogSources:
        type: integer
        description: A count of inactive log sources for the Agent.
        x-omitempty: true
        x-nullable: true
        readOnly: true
      status:
        type: string
        description: The status of the component.
        enum:
          - Paused
          - Enabled
          - Unregistered
        default: Enabled
  AgentSummary:
    type: object
    allOf:
      - $ref: '#/definitions/AgentSummaryLite'
      - $ref: '#/definitions/AgentStatus'
  AgentGeneral:
    type: object
    properties:
      compress:
        type: integer
        description: The compression level.
        minimum: 0
        maximum: 9
        default: 0
      connectionTimeout:
        type: integer
        description: The connection timeout, in seconds, for Agent socket connections.
        minimum: 3
        maximum: 7200
        default: 120
      cycleTime:
        type: integer
        description: The time, in seconds, for a single processing cycle.
        minimum: 1
        maximum: 86400
        default: 10
      eventLogBuffer:
        type: integer
        description: The size, in KB, of the event log read buffer.
        minimum: 4
        maximum: 256
        default: 8
      eventLogCacheLifetime:
        type: integer
        description: The lifetime, in minutes, of the event log cache.
        minimum: 5
        maximum: 1440
        default: 30
      eventLogTimeout:
        type: integer
        description: The time, in seconds, allowed for remote systems to respond to event log read requests.
        minimum: 1
        maximum: 120
        default: 10
      heartbeatInterval:
        type: integer
        description: The number of processing cycles between heartbeats.
        minimum: 1
        maximum: 60
        default: 6
      failbackDelay:
        type: integer
        description: The number of minutes to wait before failing back to a higher priority Log Manager.
        minimum: 0
        maximum: 3600
        default: 60
      flushBatch:
        type: integer
        description: Sets the number of logs to flush before throttling sends.
        minimum: 1
        maximum: 10000
        default: 100
      loadBalanceDelay:
        type: integer
        description: The number of minutes to wait before failing back to a higher priority Log Manager when in a load balancing deployment.
        minimum: 1
        maximum: 10000
        default: 100
      localLogLifetime:
        type: integer
        description: The time, in days, to keep Agent logs.
        minimum: 1
        maximum: 30
        default: 7
      logLevel:
        type: string
        description: Sets the Agent logging level. The log is written to scsm.log).
        enum:
          - None
          - Error
          - Warning
          - Info
          - Verbose
          - Debug
        default: Verbose
      maxLogQueueMemory:
        type: integer
        description: The maximum amount of memory, in MB, the Agent will use for its in memory data queue before spooling incoming syslog data to a temporary file.
        minimum: 10
        maximum: 256
        default: 25
      maxServiceMemory:
        type: integer
        description: The maximum memory, in MB, allowed for the Agent process.
        minimum: 100
        maximum: 16384
        default: 512
      maxSyslogSuspenseSize:
        type: integer
        description: The maximum Syslog, IPFIX/NetFlow/J-Flow, sFlow, and SNMP trap suspense file size, in MB.
        minimum: 1
        maximum: 5
        default: 5
      processPriority:
        type: string
        description: The priority level for the Agent process.
        enum:
          - low
          - belowNormal
          - normal
          - aboveNormal
          - high
        default: normal
      socketReceiveTimeout:
        type: integer
        description: The socket receive timeout, in ms.
        minimum: 1000
        maximum: 7200000
        default: 60000
      socketSendTimeout:
        type: integer
        description: The socket send timeout, in ms.
        minimum: 1000
        maximum: 7200000
        default: 60000
      virtualSourceDNSResolution:
        type: boolean
        description: When enabled, the Agent attempts to resolve hostnames for syslog devices that send IP addresses as the identifier. It also attempts to resolves IP addresses for syslog sending devices that send hostnames as their identifier.
        enum:
          - true
          - false
        default: true
      compressBatch:
        type: integer
        description: The number of log messages to batch up and compress before sending.
        minimum: 1
        maximum: 1000
        default: 50
      logSourceVirtualizationThreadCount:
        type: integer
        description: The number of threads to process Log Source Virtualization rules.
        minimum: 1
        maximum: 50
        default: 5
      logsourceVirtualizationTimeoutMillsec:
        type: integer
        description: The timeout, in ms, for Log Source Virtualization regular expression processing. Creates a diagnostic error after the timeout.
        minimum: 1
        maximum: 1000
        default: 100
  AgentNetflowServer:
    type: object
    properties:
      netflowServerNIC:
        type: string
        description: Specifies the interface to receive IPFIX/Netflow/J-Flow data.
      port:
        type: integer
        description: The port on which the IPFIX/NetFlow/J-Flow server receives NetFlow packets.
        minimum: 1
        maximum: 65535
        default: 5500
      netflowVerbose:
        type: boolean
        description: Creates Netflow/J-Flow v9 verbose log messages.
        enum:
          - true
          - false
        default: false
  Capabilities:
    type: string
    description: The capabilities of the Agent.
    enum:
      - None
      - RealtimeFileMonitor
      - AllFlagsSet
  AgentStatus:
    type: object
    properties:
      lastHeartbeat:
        $ref: '#/definitions/LastHeartbeat'
      lastDataProcessor:
        type: string
        description: The most recent data processor of the Agent.
        x-nullable: True
        x-omitempty: true
        readOnly: true
      version:
        $ref: '#/definitions/Version'
      capabilities:
        $ref: '#/definitions/Capabilities'
  NetworkConnectionMonitor:
    type: object
    properties:
      networkConnectionMonitor:
        type: boolean
        description: If set to true, enables the Network Connection Monitor.
        enum:
          - true
          - false
        default: false
      ncmIncludeUAMData:
        type: boolean
        description: If set to true, includes UAM data in the Network Connection Monitor logs.
        enum:
          - true
          - false
        default: false
      logListeners:
        type: boolean
        description: Generates logs for listening TCP/UDP sockets.
        enum:
          - true
          - false
        default: false
      logEstablishedInboundConnections:
        type: boolean
        description: Generates logs for established inbound TCP connections.
        enum:
          - true
          - false
        default: false
      logEstablishedOutboundConnections:
        type: boolean
        description: Generates logs for established outbound TCP connections.
        enum:
          - true
          - false
        default: false
      networkConnectionMonitorInterval:
        type: integer
        description: The polling interval, in seconds, for the Network Connection Monitor.
        minimum: 1
        maximum: 86400
        default: 5
  ProcessMonitor:
    type: object
    properties:
      pmincludeUAMData:
        type: boolean
        description: If set to true, enables the inclusion of data in the Process Monitor logs from any of the UAM properties.
        enum:
          - true
          - false
        default: false
      processMonitor:
        type: boolean
        description: If set to true, enables the Process Monitor to monitor when processes start and end on a Windows or UNIX host.
        enum:
          - true
          - false
        default: false
      processMonitorInterval:
        type: integer
        description: The polling interval, in seconds, for the Process Monitor.
        minimum: 1
        maximum: 86400
        default: 5
  SecureSyslogServer:
    type: object
    properties:
      port:
        type: integer
        description: The secure syslog TCP port to listen on.
        minimum: 1
        maximum: 65535
        default: 6514
      useServerCert:
        type: boolean
        description: If set to true, the Agent uses the specified certificate for server-side authentication during the establishment of secure syslog connections. Otherwise the Agent uses a self-generated/signed certificate, which is the default.
        enum:
          - true
          - false
        default: false
      certStore:
        type: string
        description: The Windows certificate store where the Agent secure syslog server certificate is installed.
        enum:
          - MY
          - ROOT
      certSubject:
        type: string
        description: The Subject of the server certificate that the Agent should use for secure syslog.
      certLocation:
        type: string
        description: The Windows certificate location where the Agent secure syslog server certificate is installed.
        enum:
          - CurrentUser
          - LocalMachine
      enforceClientCertTrust:
        type: boolean
        description: Enforces the secure syslog certificate Trusted Authority Check.
        enum:
          - true
          - false
        default: false
      enforceClientCertRevocation:
        type: boolean
        description: Enforces the secure syslog Certificate Revocation Check.
        enum:
          - true
          - false
        default: false
      requireClientCert:
        type: boolean
        description: Requires secure syslog clients to present a client certificate when connecting.
        enum:
          - true
          - false
        default: false
      clientCertOCSPURL:
        type: string
        description: The OCSP URL for secure syslog client certificate revocation checking.
  SFlowServer:
    type: object
    properties:
      logCounters:
        type: boolean
        description: If set to true, enables the logging of sFlow counter structures.
        enum:
          - true
          - false
        default: false
      serverEnabled:
        type: boolean
        description: If set to true, enables the sFlow server.
        enum:
          - true
          - false
        default: false
      serverNIC:
        type: string
        description: Specifies the interface to receive sFlow data.
        default: '0'
      udpPort:
        type: integer
        description: The port on which the sFlow server receives packets.
        minimum: 1
        maximum: 65535
        default: 6343
      extraLogging:
        type: boolean
        description: If set to true, enables logging of unknown sFlow records to a local file.
        enum:
          - true
          - false
        default: false
      logDetails:
        type: boolean
        description: If set to true, enables logging of uninteresting sFlow counter data in a details section of the scsm.log.
        enum:
          - true
          - false
        default: false
  TLSCertificates:
    type: object
    properties:
      certLocation:
        type: string
        description: The location of the Windows certificate where the Agent client certificate is installed.
        enum:
          - CurrentUser
          - LocalMachine
      certStore:
        type: string
        description: The Windows certificate store where the Agent client certificate is installed.
        enum:
          - MY
          - ROOT
      certSubject:
        type: string
        description: The subject of the client certificate that the Agent should use.
      tlsCert:
        type: boolean
        description: When true, the Agent uses the specified client certificate when connecting to the Mediator. Otherwise, no Agent certificate is used.
        enum:
          - true
          - false
        default: false
      mediatorTLSCertOCSPURL:
        type: string
        description: The OCSP URL for Mediator certificate revocation checking.
      enforceMediatorTLSCertTrust:
        type: boolean
        description: Enforces Mediator certificate Trusted Authority Check.
        enum:
          - true
          - false
        default: false
      enforceMediatorTLSCertRevocation:
        type: boolean
        description: Enforces Mediator certificate Revocation Check.
        enum:
          - true
          - false
        default: false
      mediatorTLSCertLocation:
        type: string
        description: The file or directory containing the CA certificate that authenticates the Mediator server certificate.
      certFile:
        type: string
        description: The file containing the client certificate that the Agent should use.
      secretKeyFilename:
        type: string
        description: The file containing the Agent certificate's secret key.
      secretKeyPassword:
        type: string
        format: password
        description: The passphrase for the Agent certificate's secret key.
  FileIntegrityMonitor:
    type: object
    properties:
      fileMonitorEnabled:
        type: boolean
        enum:
          - true
          - false
        description: The FIM status of the Agent.
        default: false
      dataDefender:
        type: boolean
        enum:
          - true
          - false
        default: false
        description: The Data Defender status of the Agent.
      includeUAMData:
        type: boolean
        enum:
          - true
          - false
        default: false
        description: If set to true, includes User Activity Monitor data for the Agent.
      realtimeFileMonitor:
        type: boolean
        enum:
          - true
          - false
        default: false
        description: The Real Time FIM status of the agent.
      realtimeAnomalyDetection:
        type: boolean
        enum:
          - true
          - false
        default: false
        description: If set to true, enables Real Time anomaly detection for the Agent.
      realtimeRecordBufferLimit:
        type: integer
        description: The maximum number of bytes the RealtimeFileMonitor can use.
        minimum: 0
        maximum: 2147483647
        default: 10485760
      realtimeIDMPollingInterval:
        type: integer
        description: The number of seconds to wait before refreshing the login Id (uid) cache for RTFIM.
        minimum: 5
        maximum: 86400
        default: 5
      RTFIMExcludeNestedDirectoryEvents:
        type: boolean
        description: If set to true, enables this option to filter out directory events within a monitored directory.
        enum:
          - true
          - false
        default: false
  UniDirectionalAgent:
    type: object
    properties:
      hashMode:
        type: string
        description: The hash to use when sending messages from the unidirectional Agent to the Data Processor.
        enum:
          - NoHash
          - SHA256
          - SHA512
      mediatorPort:
        type: integer
        description: Specifies the Data Processor port to use when running in unidirectional Agent mode.
        minimum: 1
        maximum: 65535
        default: 40000
      isEnabled:
        type: boolean
        description: If set to true, enables unidirectional Agent communications with the Data Processor.
        enum:
          - true
          - false
        default: false
  UserActivityMonitor:
    type: object
    properties:
      logonActivity:
        type: boolean
        description: If set to true, enables the logon/logoff User Activity Monitor.
        enum:
          - true
          - false
        default: false
      processActivity:
        type: boolean
        description: If set to true, enables the process User Activity Monitor.
        enum:
          - true
          - false
        default: false
      networkSessionActivity:
        type: boolean
        description: If set to true, enables the network session User Activity Monitor.
        enum:
          - true
          - false
        default: false
      interval:
        type: integer
        description: The polling interval, in seconds, for the User Activity Monitor.
        minimum: 3
        maximum: 86400
        default: 5
      history:
        type: integer
        description: The maximum number of hours to keep User Activity Monitor history.
        minimum: 1
        maximum: 24
        default: 24
  SNMPTrapReceiver:
    type: object
    properties:
      receiver:
        type: boolean
        description: If set to true, enables the SNMP trap receiver server.
        enum:
          - true
          - false
        default: false
      localIP:
        type: string
        format: ipv4
        default: '0'
        description: The SNMP trap receiver IP address.
      localPort:
        type: integer
        description: The local port interface the SNMP trap receiver binds to.
        minimum: 1
        maximum: 65535
        default: 162
  SyslogServer:
    type: object
    properties:
      file:
        type: boolean
        description: If set to true, enables writing syslog data to the text file specified in the SyslogFilePath property.
        enum:
          - true
          - false
        default: false
      filePath:
        type: string
        description: All syslog messages received will be written to this file if the SyslogFile property is enabled.
        default: '../logs/syslogfile.log'
      serverNIC:
        type: string
        description: Specifies the interface to receive syslog data.
        default: '0'
      udpPort:
        type: integer
        description: The syslog UDP port to listen on.
        minimum: 1
        maximum: 65535
        default: 514
      tcpPort:
        type: integer
        description: The syslog TCP port to listen on.
        minimum: 1
        maximum: 65535
        default: 514
      fileRotationSize:
        type: integer
        description: The syslog file rotation size, in MB.
        minimum: 5
        maximum: 100
        default: 5
      fileHistory:
        type: integer
        description: The maximum number of days to keep rotated syslog files.
        minimum: 1
        maximum: 30
        default: 7
      parsedHosts:
        type: string
        description: The set of host IPs from where syslogs can be expected. Separate host IPs by delimiters ('\r\n').
      parsedHostExpressions:
        type: string
      parameter1:
        type: boolean
        description: If set to true, enables parsing TCP syslog messages using additional delimiters ('\r\n', '\r', and '\0' (NetScreen Firewall)).
        enum:
          - true
          - false
        default: false
  AgentUpgradeHistory:
    type: object
    properties:
      versionHistoryId:
        type: integer
        description: The Id of the agent update record.
      previousVersion:
        type: string
        description: The previous version of the agent.
      currentVersion:
        type: string
        description: The Agent's current version.
      dateUpdated:
        type: string
        format: date-time
        description: The Agent's upgrade time.
    readOnly: true
  SNMPV3Credential:
    type: object
    properties:
      userName:
        type: string
        description: The User name for SNMP.
      authenticationPassword:
        type: string
        format: password
        description: The password for SNMP.
      authenticationAlgorithm:
        type: string
        description: The authentication Algorithm for SNMP.
        enum:
          - 3DES
          - AES
          - DES
      encryptionPassword:
        type: string
        format: password
        description: The encryption password for SNMP.
      encryptionAlgorithm:
        type: string
        description: The encryption algorithm for SNMP.
        enum:
          - 3DES
          - AES
          - DES
  AgentToMediator:
    type: object
    properties:
      systemMonitorID:
        type: integer
        description: The Id of the Agent record.
      mediator:
        $ref: '#/definitions/KeyValue'
      priority:
        type: integer
        description: The sort order of the Mediator.
      clientAddress:
        type: string
        format: ipv4
        x-nullable: true
        description: The IP address of the Agent.
      clientPort:
        type: integer
        description: The port of the Agent.
        minimum: 1
        maximum: 65535
      serverSSLPort:
        type: integer
        description: The SSL port of the Mediator.
        minimum: 1
        maximum: 65535
      serverIP:
        type: string
        format: ipv4
        description: The IP Address (v4) of the Mediator.
      serverIPv6:
        type: string
        format: ipv6
        x-nullable: true
        x-omitempty: true
        description: The IP Address (v6) of the Mediator.
      serverDNS:
        type: string
        x-nullable: true
        x-omitempty: true
        description: The DNS of the Mediator.
  Agent:
    type: object
    allOf:
      - $ref: '#/definitions/AgentSummary'
    properties:
      rimEnabled:
        type: boolean
        description: If set to true, enables Registry Integrity Monitoring.
        enum:
          - true
          - false
        default: false
      disableFlushThrottle:
        type: boolean
        enum:
          - true
          - false
        default: false
      heartbeatWarningInterval:
        type: integer
        default: 60
      msgBuffer:
        type: integer
        default: 1000
      netflowServerCrypto:
        type: boolean
        enum:
          - true
          - false
        default: false
      passphrase:
        type: string
        format: password
        maxLength: 56
      syslogServerCrypto:
        type: boolean
        enum:
          - true
          - false
        default: false
      tcpNodeDelay:
        type: boolean
        enum:
          - true
          - false
        default: true
      tcpRecvBufferSize:
        type: integer
        default: 524288
      tcpSendBufferSize:
        type: integer
        default: 524288
      tcpReuse:
        type: boolean
        enum:
          - true
          - false
        default: true
      entityId:
        type: integer
      policyId:
        type: integer
        x-writeOnly: true
        default: -1
      snmpCommunityStrings:
        type: array
        description: The SNMP community strings.
        items:
          type: string
      general:
        $ref: '#/definitions/AgentGeneral'
      netFlowServer:
        $ref: '#/definitions/AgentNetflowServer'
      networkConnectionMonitor:
        $ref: '#/definitions/NetworkConnectionMonitor'
      processMonitor:
        $ref: '#/definitions/ProcessMonitor'
      secureSyslogServer:
        $ref: '#/definitions/SecureSyslogServer'
      sFlowServer:
        $ref: '#/definitions/SFlowServer'
      tlsCertificates:
        $ref: '#/definitions/TLSCertificates'
      fileIntegrityMonitor:
        $ref: '#/definitions/FileIntegrityMonitor'
      uniDirectionalAgent:
        $ref: '#/definitions/UniDirectionalAgent'
      userActivityMonitor:
        $ref: '#/definitions/UserActivityMonitor'
      snmpTrapReceiver:
        $ref: '#/definitions/SNMPTrapReceiver'
      syslogServer:
        $ref: '#/definitions/SyslogServer'
      snmpV3Credentials:
        type: array
        items:
          $ref: '#/definitions/SNMPV3Credential'
      agentToMediators:
        type: array
        items:
          $ref: '#/definitions/AgentToMediator'
      agentVersionHistory:
        type: array
        items:
          $ref: '#/definitions/AgentUpgradeHistory'
        x-readOnly: true
  PendingAgent:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      guid:
        type: string
        format: uuid
        x-nullable: true
      name:
        type: string
        description: The name of the System Monitor.
        maxLength: 255
      acceptanceStatus:
        type: string
        description: The acceptance status of the pending record.
        enum:
          - Pending
          - Rejected
      dateUpdated:
        type: string
        format: date-time
        description: The date the record was updated.
        readOnly: true
      entityId:
        type: integer
        description: The Entity to which Agent is attached.
      hostName:
        type: string
        description: The Host name on which Agent is installed.
        maxLength: 255
        readOnly: true
      resolvedHostId:
        type: integer
        description: The Host Id the Agent is installed on.
        x-required: true
        x-omitempty: true
        x-nullable: true
      ipAddress:
        type: string
        format: ipv4
        description: The IP address of the incoming Agent host.
      clientAddress:
        type: string
        format: ipv4
        description: The IP address of the Mediator that creates pending Agent request.
      clientPort:
        type: integer
        description: The port of the Mediator that creates pending Agent request.
        minimum: 1
        maximum: 65535
      agentType:
        $ref: '#/definitions/AgentType'
      version:
        $ref: '#/definitions/Version'
      os:
        type: string
      osVersion:
        type: string
        x-omitempty: true
      osType:
        $ref: '#/definitions/AgentOSType'
      capabilities:
        $ref: '#/definitions/Capabilities'
      agentConfigurationPolicyId:
        type: integer
        description: The configuration policy Id associated with the pending Agent record.
        x-nullable: true
        x-omitempty: true
  ObjectPermissions:
    type: object
    allOf:
      - $ref: '#/definitions/ObjectPermissionsLite'
    required:
      - owner
    properties:
      owner:
        $ref: '#/definitions/RequiredKeyValue'
  ObjectPermissionsLite:
    type: object
    required:
      - entity
    properties:
      readAccess:
        $ref: '#/definitions/ObjectAccessLevel'
      writeAccess:
        $ref: '#/definitions/ObjectAccessLevel'
      entity:
        $ref: '#/definitions/RequiredKeyValue'
  ObjectAccessLevel:
    type: string
    description: The object permissions access level. This decides the access given to end Users.
    x-omitempty: true
    enum:
    - Private
    - PublicAll
    - PublicGlobalAdmin
    - PublicGlobalAnalyst
    - PublicRestrictedAnalyst
    - PublicRestrictedAdmin
    default: Private
  SilentLogSourceDetection:
    type: object
    properties:
      Enabled:
       type: boolean
      WarnAfter:
        type: integer
        x-nullable: true
        x-omitempty: true
      ErrorAfter:
        type: integer
        x-nullable: true
        x-omitempty: true
  License:
    type: object
    properties:
      id:
        type: integer
      licenseType:
        type: string
      ExpirationDate:
        x-nullable: true
        type: string
        format: date-time
      active:
        type: boolean
      licenseTo:
        description: License type
        type: string
      MajorVersion:
        type: integer
      MinorVersion:
        type: integer
      Quantity:
        type: integer
      ComponentId:
        type: integer
      DateUpdated:
        type: string
        format: date-time
  Entitlements:
    type: object
    properties:
      RespondX:
        type: boolean
  AgentInitialSeetings:
    type: object
    properties:
      overrideEntityForNewHosts:
        type: boolean
      entity:
        $ref: '#/definitions/KeyValue'
      licenseType:
        $ref: '#/definitions/LicenseType'
      smConfigPolicy:
        type: integer
        x-writeOnly: true
        default: -1
      agentToMediators:
        type: array
        items:
          $ref: '#/definitions/AgentToMediator'
      fimPolicies:
        type: array
        description: The File Integrity Monitor Policy Ids for the agent.
        items:
          type: integer
        x-omitempty: true
      fileIntegrityMonitor:
        $ref: '#/definitions/FileIntegrityMonitor'
      rimEnabled:
        type: boolean
        description: If set to true, enables Registry Integrity Monitoring.
        enum:
          - true
          - false
        default: false
      rimPolicies:
        type: array
        description: The Registry Integrity Monitor Policy Ids for the agent.
        items:
          type: integer
        x-omitempty: true
      dldPolicy:
        type: integer
        description: The Data Loss Defender Policy Id for the agent.
        x-nullable: true
        x-omitempty: true
      processMonitor:
        $ref: '#/definitions/ProcessMonitor'
      networkConnectionMonitor:
        $ref: '#/definitions/NetworkConnectionMonitor'
      userActivityMonitor:
        $ref: '#/definitions/UserActivityMonitor'
  CustomizeLogsourceAcceptance:
    type: object
    properties:
      enableCustomizeAcceptance:
        type: boolean
        enum:
          - true
          - false
        description: The FIM status of the Agent.
        default: false
      entity:
        $ref: '#/definitions/KeyValue'
      logMessageProcessingMode:
        $ref: '#/definitions/MPEProcessingMode'
      forwardLogsToLogRhythmLogMart:
        type: boolean
        enum:
          - true
          - false
        description: The FIM status of the Agent.
        default: false
      isSilentLogSourceEnabled:
        type: boolean
        enum:
          - true
          - false
        default: false
      defMsgArchiveMode:
        $ref: '#/definitions/ArchiveMode'

  LogSourceInitialSettings:
    type: object
    properties:
      name:
        $ref: '#/definitions/logsourceName'
      msgSourceType:
        $ref: '#/definitions/KeyValue'
      mpePolicy:
        $ref: '#/definitions/KeyValue'
      knownHost:
        $ref: '#/definitions/KeyValue'
      acceptDefault:
        type: boolean
        default: false
      acceptCustomize:
        $ref: '#/definitions/CustomizeLogsourceAcceptance'
